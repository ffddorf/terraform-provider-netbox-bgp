// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	CookieAuthScopes = "cookieAuth.Scopes"
	TokenAuthScopes  = "tokenAuth.Scopes"
)

// Defines values for BGPSessionStatusLabel.
const (
	BGPSessionStatusLabelActive  BGPSessionStatusLabel = "Active"
	BGPSessionStatusLabelFailed  BGPSessionStatusLabel = "Failed"
	BGPSessionStatusLabelOffline BGPSessionStatusLabel = "Offline"
	BGPSessionStatusLabelPlanned BGPSessionStatusLabel = "Planned"
)

// Defines values for BGPSessionStatusValue.
const (
	BGPSessionStatusValueActive  BGPSessionStatusValue = "active"
	BGPSessionStatusValueFailed  BGPSessionStatusValue = "failed"
	BGPSessionStatusValueOffline BGPSessionStatusValue = "offline"
	BGPSessionStatusValuePlanned BGPSessionStatusValue = "planned"
)

// Defines values for BGPSessionRequestStatus.
const (
	BGPSessionRequestStatusActive  BGPSessionRequestStatus = "active"
	BGPSessionRequestStatusFailed  BGPSessionRequestStatus = "failed"
	BGPSessionRequestStatusOffline BGPSessionRequestStatus = "offline"
	BGPSessionRequestStatusPlanned BGPSessionRequestStatus = "planned"
)

// Defines values for CommunityStatusLabel.
const (
	CommunityStatusLabelActive     CommunityStatusLabel = "Active"
	CommunityStatusLabelDeprecated CommunityStatusLabel = "Deprecated"
	CommunityStatusLabelReserved   CommunityStatusLabel = "Reserved"
)

// Defines values for CommunityStatusValue.
const (
	CommunityStatusValueActive     CommunityStatusValue = "active"
	CommunityStatusValueDeprecated CommunityStatusValue = "deprecated"
	CommunityStatusValueReserved   CommunityStatusValue = "reserved"
)

// Defines values for CommunityListRuleAction.
const (
	CommunityListRuleActionDeny   CommunityListRuleAction = "deny"
	CommunityListRuleActionPermit CommunityListRuleAction = "permit"
)

// Defines values for CommunityListRuleRequestAction.
const (
	CommunityListRuleRequestActionDeny   CommunityListRuleRequestAction = "deny"
	CommunityListRuleRequestActionPermit CommunityListRuleRequestAction = "permit"
)

// Defines values for CommunityRequestStatus.
const (
	CommunityRequestStatusActive     CommunityRequestStatus = "active"
	CommunityRequestStatusDeprecated CommunityRequestStatus = "deprecated"
	CommunityRequestStatusReserved   CommunityRequestStatus = "reserved"
)

// Defines values for PatchedPrefixListRequestFamily.
const (
	PatchedPrefixListRequestFamilyIpv4 PatchedPrefixListRequestFamily = "ipv4"
	PatchedPrefixListRequestFamilyIpv6 PatchedPrefixListRequestFamily = "ipv6"
)

// Defines values for PatchedWritableBGPSessionRequestStatus.
const (
	PatchedWritableBGPSessionRequestStatusActive  PatchedWritableBGPSessionRequestStatus = "active"
	PatchedWritableBGPSessionRequestStatusFailed  PatchedWritableBGPSessionRequestStatus = "failed"
	PatchedWritableBGPSessionRequestStatusOffline PatchedWritableBGPSessionRequestStatus = "offline"
	PatchedWritableBGPSessionRequestStatusPlanned PatchedWritableBGPSessionRequestStatus = "planned"
)

// Defines values for PatchedWritableCommunityListRuleRequestAction.
const (
	PatchedWritableCommunityListRuleRequestActionDeny   PatchedWritableCommunityListRuleRequestAction = "deny"
	PatchedWritableCommunityListRuleRequestActionPermit PatchedWritableCommunityListRuleRequestAction = "permit"
)

// Defines values for PatchedWritableCommunityRequestStatus.
const (
	PatchedWritableCommunityRequestStatusActive     PatchedWritableCommunityRequestStatus = "active"
	PatchedWritableCommunityRequestStatusDeprecated PatchedWritableCommunityRequestStatus = "deprecated"
	PatchedWritableCommunityRequestStatusReserved   PatchedWritableCommunityRequestStatus = "reserved"
)

// Defines values for PatchedWritablePrefixListRuleRequestAction.
const (
	PatchedWritablePrefixListRuleRequestActionDeny   PatchedWritablePrefixListRuleRequestAction = "deny"
	PatchedWritablePrefixListRuleRequestActionPermit PatchedWritablePrefixListRuleRequestAction = "permit"
)

// Defines values for PatchedWritableRoutingPolicyRuleRequestAction.
const (
	PatchedWritableRoutingPolicyRuleRequestActionDeny   PatchedWritableRoutingPolicyRuleRequestAction = "deny"
	PatchedWritableRoutingPolicyRuleRequestActionPermit PatchedWritableRoutingPolicyRuleRequestAction = "permit"
)

// Defines values for PrefixListFamily.
const (
	PrefixListFamilyIpv4 PrefixListFamily = "ipv4"
	PrefixListFamilyIpv6 PrefixListFamily = "ipv6"
)

// Defines values for PrefixListRequestFamily.
const (
	Ipv4 PrefixListRequestFamily = "ipv4"
	Ipv6 PrefixListRequestFamily = "ipv6"
)

// Defines values for PrefixListRuleAction.
const (
	PrefixListRuleActionDeny   PrefixListRuleAction = "deny"
	PrefixListRuleActionPermit PrefixListRuleAction = "permit"
)

// Defines values for PrefixListRuleRequestAction.
const (
	PrefixListRuleRequestActionDeny   PrefixListRuleRequestAction = "deny"
	PrefixListRuleRequestActionPermit PrefixListRuleRequestAction = "permit"
)

// Defines values for RoutingPolicyRuleAction.
const (
	RoutingPolicyRuleActionDeny   RoutingPolicyRuleAction = "deny"
	RoutingPolicyRuleActionPermit RoutingPolicyRuleAction = "permit"
)

// Defines values for RoutingPolicyRuleRequestAction.
const (
	RoutingPolicyRuleRequestActionDeny   RoutingPolicyRuleRequestAction = "deny"
	RoutingPolicyRuleRequestActionPermit RoutingPolicyRuleRequestAction = "permit"
)

// Defines values for WritableBGPSessionRequestStatus.
const (
	WritableBGPSessionRequestStatusActive  WritableBGPSessionRequestStatus = "active"
	WritableBGPSessionRequestStatusFailed  WritableBGPSessionRequestStatus = "failed"
	WritableBGPSessionRequestStatusOffline WritableBGPSessionRequestStatus = "offline"
	WritableBGPSessionRequestStatusPlanned WritableBGPSessionRequestStatus = "planned"
)

// Defines values for WritableCommunityListRuleRequestAction.
const (
	WritableCommunityListRuleRequestActionDeny   WritableCommunityListRuleRequestAction = "deny"
	WritableCommunityListRuleRequestActionPermit WritableCommunityListRuleRequestAction = "permit"
)

// Defines values for WritableCommunityRequestStatus.
const (
	WritableCommunityRequestStatusActive     WritableCommunityRequestStatus = "active"
	WritableCommunityRequestStatusDeprecated WritableCommunityRequestStatus = "deprecated"
	WritableCommunityRequestStatusReserved   WritableCommunityRequestStatus = "reserved"
)

// Defines values for WritablePrefixListRuleRequestAction.
const (
	WritablePrefixListRuleRequestActionDeny   WritablePrefixListRuleRequestAction = "deny"
	WritablePrefixListRuleRequestActionPermit WritablePrefixListRuleRequestAction = "permit"
)

// Defines values for WritableRoutingPolicyRuleRequestAction.
const (
	WritableRoutingPolicyRuleRequestActionDeny   WritableRoutingPolicyRuleRequestAction = "deny"
	WritableRoutingPolicyRuleRequestActionPermit WritableRoutingPolicyRuleRequestAction = "permit"
)

// BGPPeerGroup Adds support for custom fields and tags.
type BGPPeerGroup struct {
	Comments       *string `json:"comments,omitempty"`
	Description    string  `json:"description"`
	Display        *string `json:"display,omitempty"`
	ExportPolicies *[]int  `json:"export_policies,omitempty"`
	Id             *int    `json:"id,omitempty"`
	ImportPolicies *[]int  `json:"import_policies,omitempty"`
	Name           string  `json:"name"`
}

// BGPPeerGroupRequest Adds support for custom fields and tags.
type BGPPeerGroupRequest struct {
	Comments       *string `json:"comments,omitempty"`
	Description    string  `json:"description"`
	ExportPolicies *[]int  `json:"export_policies,omitempty"`
	ImportPolicies *[]int  `json:"import_policies,omitempty"`
	Name           string  `json:"name"`
}

// BGPSession Adds support for custom fields and tags.
type BGPSession struct {
	Comments       *string                 `json:"comments,omitempty"`
	Created        *time.Time              `json:"created"`
	CustomFields   *map[string]interface{} `json:"custom_fields,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Device         *NestedDevice           `json:"device"`
	Display        *string                 `json:"display,omitempty"`
	ExportPolicies *[]int                  `json:"export_policies,omitempty"`
	Id             *int                    `json:"id,omitempty"`
	ImportPolicies *[]int                  `json:"import_policies,omitempty"`
	LastUpdated    *time.Time              `json:"last_updated"`

	// LocalAddress Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	LocalAddress NestedIPAddress `json:"local_address"`

	// LocalAs Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	LocalAs       NestedASN           `json:"local_as"`
	Name          *string             `json:"name"`
	PeerGroup     *NestedBGPPeerGroup `json:"peer_group"`
	PrefixListIn  *NestedPrefixList   `json:"prefix_list_in"`
	PrefixListOut *NestedPrefixList   `json:"prefix_list_out"`

	// RemoteAddress Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RemoteAddress NestedIPAddress `json:"remote_address"`

	// RemoteAs Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RemoteAs NestedASN   `json:"remote_as"`
	Site     *NestedSite `json:"site"`
	Status   *struct {
		Label *BGPSessionStatusLabel `json:"label,omitempty"`

		// Value * `offline` - Offline
		// * `active` - Active
		// * `planned` - Planned
		// * `failed` - Failed
		Value *BGPSessionStatusValue `json:"value,omitempty"`
	} `json:"status,omitempty"`
	Tags   *[]NestedTag  `json:"tags,omitempty"`
	Tenant *NestedTenant `json:"tenant"`
}

// BGPSessionStatusLabel defines model for BGPSession.Status.Label.
type BGPSessionStatusLabel string

// BGPSessionStatusValue * `offline` - Offline
// * `active` - Active
// * `planned` - Planned
// * `failed` - Failed
type BGPSessionStatusValue string

// BGPSessionRequest Adds support for custom fields and tags.
type BGPSessionRequest struct {
	Comments       *string                 `json:"comments,omitempty"`
	CustomFields   *map[string]interface{} `json:"custom_fields,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Device         *NestedDeviceRequest    `json:"device"`
	ExportPolicies *[]int                  `json:"export_policies,omitempty"`
	ImportPolicies *[]int                  `json:"import_policies,omitempty"`

	// LocalAddress Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	LocalAddress NestedIPAddressRequest `json:"local_address"`

	// LocalAs Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	LocalAs       NestedASNRequest           `json:"local_as"`
	Name          *string                    `json:"name"`
	PeerGroup     *NestedBGPPeerGroupRequest `json:"peer_group"`
	PrefixListIn  *NestedPrefixListRequest   `json:"prefix_list_in"`
	PrefixListOut *NestedPrefixListRequest   `json:"prefix_list_out"`

	// RemoteAddress Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RemoteAddress NestedIPAddressRequest `json:"remote_address"`

	// RemoteAs Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RemoteAs NestedASNRequest   `json:"remote_as"`
	Site     *NestedSiteRequest `json:"site"`

	// Status * `offline` - Offline
	// * `active` - Active
	// * `planned` - Planned
	// * `failed` - Failed
	Status *BGPSessionRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest      `json:"tags,omitempty"`
	Tenant *NestedTenantRequest     `json:"tenant"`
}

// BGPSessionRequestStatus * `offline` - Offline
// * `active` - Active
// * `planned` - Planned
// * `failed` - Failed
type BGPSessionRequestStatus string

// Community Adds support for custom fields and tags.
type Community struct {
	Comments     *string                 `json:"comments,omitempty"`
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	Id           *int                    `json:"id,omitempty"`
	LastUpdated  *time.Time              `json:"last_updated"`
	Role         *int                    `json:"role"`
	Site         *int                    `json:"site"`
	Status       *struct {
		Label *CommunityStatusLabel `json:"label,omitempty"`

		// Value * `active` - Active
		// * `reserved` - Reserved
		// * `deprecated` - Deprecated
		Value *CommunityStatusValue `json:"value,omitempty"`
	} `json:"status,omitempty"`
	Tags   *[]NestedTag  `json:"tags,omitempty"`
	Tenant *NestedTenant `json:"tenant"`
	Value  string        `json:"value"`
}

// CommunityStatusLabel defines model for Community.Status.Label.
type CommunityStatusLabel string

// CommunityStatusValue * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type CommunityStatusValue string

// CommunityList Adds support for custom fields and tags.
type CommunityList struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`
	Display      *string                 `json:"display,omitempty"`
	Id           *int                    `json:"id,omitempty"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTag            `json:"tags,omitempty"`
}

// CommunityListRequest Adds support for custom fields and tags.
type CommunityListRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
}

// CommunityListRule Adds support for custom fields and tags.
type CommunityListRule struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action    CommunityListRuleAction `json:"action"`
	Comments  *string                 `json:"comments,omitempty"`
	Community *NestedCommunity        `json:"community"`

	// CommunityList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	CommunityList NestedCommunityList     `json:"community_list"`
	Created       *time.Time              `json:"created"`
	CustomFields  *map[string]interface{} `json:"custom_fields,omitempty"`
	Display       *string                 `json:"display,omitempty"`
	Id            *int                    `json:"id,omitempty"`
	LastUpdated   *time.Time              `json:"last_updated"`
	Tags          *[]NestedTag            `json:"tags,omitempty"`
}

// CommunityListRuleAction * `permit` - Permit
// * `deny` - Deny
type CommunityListRuleAction string

// CommunityListRuleRequest Adds support for custom fields and tags.
type CommunityListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action    CommunityListRuleRequestAction `json:"action"`
	Comments  *string                        `json:"comments,omitempty"`
	Community *NestedCommunityRequest        `json:"community"`

	// CommunityList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	CommunityList NestedCommunityListRequest `json:"community_list"`
	CustomFields  *map[string]interface{}    `json:"custom_fields,omitempty"`
	Tags          *[]NestedTagRequest        `json:"tags,omitempty"`
}

// CommunityListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type CommunityListRuleRequestAction string

// CommunityRequest Adds support for custom fields and tags.
type CommunityRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Role         *int                    `json:"role"`
	Site         *int                    `json:"site"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *CommunityRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest     `json:"tags,omitempty"`
	Tenant *NestedTenantRequest    `json:"tenant"`
	Value  string                  `json:"value"`
}

// CommunityRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type CommunityRequestStatus string

// NestedASN Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedASN struct {
	// Asn 16- or 32-bit autonomous system number
	Asn     int64   `json:"asn"`
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// NestedASNRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedASNRequest struct {
	// Asn 16- or 32-bit autonomous system number
	Asn int64 `json:"asn"`
}

// NestedBGPPeerGroup Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedBGPPeerGroup struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// NestedBGPPeerGroupRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedBGPPeerGroupRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NestedCommunity Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedCommunity struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Url     *string `json:"url,omitempty"`
	Value   string  `json:"value"`
}

// NestedCommunityList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedCommunityList struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    string  `json:"name"`
	Url     *string `json:"url,omitempty"`
}

// NestedCommunityListRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedCommunityListRequest struct {
	Name string `json:"name"`
}

// NestedCommunityRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedCommunityRequest struct {
	Value string `json:"value"`
}

// NestedDevice Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedDevice struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    *string `json:"name"`
	Url     *string `json:"url,omitempty"`
}

// NestedDeviceRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedDeviceRequest struct {
	Name *string `json:"name"`
}

// NestedIPAddress Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedIPAddress struct {
	Address string  `json:"address"`
	Display *string `json:"display,omitempty"`
	Family  *int    `json:"family,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Url     *string `json:"url,omitempty"`
}

// NestedIPAddressRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedIPAddressRequest struct {
	Address string `json:"address"`
}

// NestedPrefix Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedPrefix struct {
	Depth   *int    `json:"_depth,omitempty"`
	Display *string `json:"display,omitempty"`
	Family  *int    `json:"family,omitempty"`
	Id      *int    `json:"id,omitempty"`

	// Prefix IPv4 or IPv6 network with mask
	Prefix string  `json:"prefix"`
	Url    *string `json:"url,omitempty"`
}

// NestedPrefixList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedPrefixList struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    string  `json:"name"`
	Url     *string `json:"url,omitempty"`
}

// NestedPrefixListRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedPrefixListRequest struct {
	Name string `json:"name"`
}

// NestedPrefixRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedPrefixRequest struct {
	// Prefix IPv4 or IPv6 network with mask
	Prefix string `json:"prefix"`
}

// NestedRoutingPolicy Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedRoutingPolicy struct {
	Description *string `json:"description,omitempty"`
	Display     *string `json:"display,omitempty"`
	Id          *int    `json:"id,omitempty"`
	Name        string  `json:"name"`
	Url         *string `json:"url,omitempty"`
}

// NestedRoutingPolicyRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedRoutingPolicyRequest struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// NestedSite Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedSite struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`

	// Name Full name of the site
	Name string  `json:"name"`
	Slug string  `json:"slug"`
	Url  *string `json:"url,omitempty"`
}

// NestedSiteRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedSiteRequest struct {
	// Name Full name of the site
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// NestedTag Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTag struct {
	Color   *string `json:"color,omitempty"`
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    string  `json:"name"`
	Slug    string  `json:"slug"`
	Url     *string `json:"url,omitempty"`
}

// NestedTagRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTagRequest struct {
	Color *string `json:"color,omitempty"`
	Name  string  `json:"name"`
	Slug  string  `json:"slug"`
}

// NestedTenant Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTenant struct {
	Display *string `json:"display,omitempty"`
	Id      *int    `json:"id,omitempty"`
	Name    string  `json:"name"`
	Slug    string  `json:"slug"`
	Url     *string `json:"url,omitempty"`
}

// NestedTenantRequest Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
// dictionary of attributes which can be used to uniquely identify the related object. This class should be
// subclassed to return a full representation of the related object on read.
type NestedTenantRequest struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
}

// PaginatedBGPPeerGroupList defines model for PaginatedBGPPeerGroupList.
type PaginatedBGPPeerGroupList struct {
	Count    *int            `json:"count,omitempty"`
	Next     *string         `json:"next"`
	Previous *string         `json:"previous"`
	Results  *[]BGPPeerGroup `json:"results,omitempty"`
}

// PaginatedBGPSessionList defines model for PaginatedBGPSessionList.
type PaginatedBGPSessionList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]BGPSession `json:"results,omitempty"`
}

// PaginatedCommunityList defines model for PaginatedCommunityList.
type PaginatedCommunityList struct {
	Count    *int         `json:"count,omitempty"`
	Next     *string      `json:"next"`
	Previous *string      `json:"previous"`
	Results  *[]Community `json:"results,omitempty"`
}

// PaginatedCommunityListList defines model for PaginatedCommunityListList.
type PaginatedCommunityListList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]CommunityList `json:"results,omitempty"`
}

// PaginatedCommunityListRuleList defines model for PaginatedCommunityListRuleList.
type PaginatedCommunityListRuleList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]CommunityListRule `json:"results,omitempty"`
}

// PaginatedPrefixListList defines model for PaginatedPrefixListList.
type PaginatedPrefixListList struct {
	Count    *int          `json:"count,omitempty"`
	Next     *string       `json:"next"`
	Previous *string       `json:"previous"`
	Results  *[]PrefixList `json:"results,omitempty"`
}

// PaginatedPrefixListRuleList defines model for PaginatedPrefixListRuleList.
type PaginatedPrefixListRuleList struct {
	Count    *int              `json:"count,omitempty"`
	Next     *string           `json:"next"`
	Previous *string           `json:"previous"`
	Results  *[]PrefixListRule `json:"results,omitempty"`
}

// PaginatedRoutingPolicyList defines model for PaginatedRoutingPolicyList.
type PaginatedRoutingPolicyList struct {
	Count    *int             `json:"count,omitempty"`
	Next     *string          `json:"next"`
	Previous *string          `json:"previous"`
	Results  *[]RoutingPolicy `json:"results,omitempty"`
}

// PaginatedRoutingPolicyRuleList defines model for PaginatedRoutingPolicyRuleList.
type PaginatedRoutingPolicyRuleList struct {
	Count    *int                 `json:"count,omitempty"`
	Next     *string              `json:"next"`
	Previous *string              `json:"previous"`
	Results  *[]RoutingPolicyRule `json:"results,omitempty"`
}

// PatchedBGPPeerGroupRequest Adds support for custom fields and tags.
type PatchedBGPPeerGroupRequest struct {
	Comments       *string `json:"comments,omitempty"`
	Description    *string `json:"description,omitempty"`
	ExportPolicies *[]int  `json:"export_policies,omitempty"`
	ImportPolicies *[]int  `json:"import_policies,omitempty"`
	Name           *string `json:"name,omitempty"`
}

// PatchedCommunityListRequest Adds support for custom fields and tags.
type PatchedCommunityListRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
}

// PatchedPrefixListRequest Adds support for custom fields and tags.
type PatchedPrefixListRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`

	// Family * `ipv4` - IPv4
	// * `ipv6` - IPv6
	Family *PatchedPrefixListRequestFamily `json:"family,omitempty"`
	Name   *string                         `json:"name,omitempty"`
	Tags   *[]NestedTagRequest             `json:"tags,omitempty"`
}

// PatchedPrefixListRequestFamily * `ipv4` - IPv4
// * `ipv6` - IPv6
type PatchedPrefixListRequestFamily string

// PatchedRoutingPolicyRequest Adds support for custom fields and tags.
type PatchedRoutingPolicyRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Name         *string                 `json:"name,omitempty"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
}

// PatchedWritableBGPSessionRequest Adds support for custom fields and tags.
type PatchedWritableBGPSessionRequest struct {
	Comments       *string                 `json:"comments,omitempty"`
	CustomFields   *map[string]interface{} `json:"custom_fields,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Device         *int                    `json:"device"`
	ExportPolicies *[]int                  `json:"export_policies,omitempty"`
	ImportPolicies *[]int                  `json:"import_policies,omitempty"`
	LocalAddress   *int                    `json:"local_address,omitempty"`
	LocalAs        *int                    `json:"local_as,omitempty"`
	Name           *string                 `json:"name"`
	PeerGroup      *int                    `json:"peer_group"`
	PrefixListIn   *int                    `json:"prefix_list_in"`
	PrefixListOut  *int                    `json:"prefix_list_out"`
	RemoteAddress  *int                    `json:"remote_address,omitempty"`
	RemoteAs       *int                    `json:"remote_as,omitempty"`
	Site           *int                    `json:"site"`

	// Status * `offline` - Offline
	// * `active` - Active
	// * `planned` - Planned
	// * `failed` - Failed
	Status *PatchedWritableBGPSessionRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest                     `json:"tags,omitempty"`
	Tenant *int                                    `json:"tenant"`
}

// PatchedWritableBGPSessionRequestStatus * `offline` - Offline
// * `active` - Active
// * `planned` - Planned
// * `failed` - Failed
type PatchedWritableBGPSessionRequestStatus string

// PatchedWritableCommunityListRuleRequest Adds support for custom fields and tags.
type PatchedWritableCommunityListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action        *PatchedWritableCommunityListRuleRequestAction `json:"action,omitempty"`
	Comments      *string                                        `json:"comments,omitempty"`
	Community     *int                                           `json:"community,omitempty"`
	CommunityList *int                                           `json:"community_list,omitempty"`
	CustomFields  *map[string]interface{}                        `json:"custom_fields,omitempty"`
	Tags          *[]NestedTagRequest                            `json:"tags,omitempty"`
}

// PatchedWritableCommunityListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type PatchedWritableCommunityListRuleRequestAction string

// PatchedWritableCommunityRequest Adds support for custom fields and tags.
type PatchedWritableCommunityRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Role         *int                    `json:"role"`
	Site         *int                    `json:"site"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *PatchedWritableCommunityRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest                    `json:"tags,omitempty"`
	Tenant *int                                   `json:"tenant"`
	Value  *string                                `json:"value,omitempty"`
}

// PatchedWritableCommunityRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type PatchedWritableCommunityRequestStatus string

// PatchedWritablePrefixListRuleRequest Adds support for custom fields and tags.
type PatchedWritablePrefixListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action       *PatchedWritablePrefixListRuleRequestAction `json:"action,omitempty"`
	Comments     *string                                     `json:"comments,omitempty"`
	CustomFields *map[string]interface{}                     `json:"custom_fields,omitempty"`
	Ge           *int                                        `json:"ge"`
	Index        *int                                        `json:"index,omitempty"`
	Le           *int                                        `json:"le"`
	Prefix       *int                                        `json:"prefix"`
	PrefixCustom *string                                     `json:"prefix_custom"`
	PrefixList   *int                                        `json:"prefix_list,omitempty"`
	Tags         *[]NestedTagRequest                         `json:"tags,omitempty"`
}

// PatchedWritablePrefixListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type PatchedWritablePrefixListRuleRequestAction string

// PatchedWritableRoutingPolicyRuleRequest Adds support for custom fields and tags.
type PatchedWritableRoutingPolicyRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action           *PatchedWritableRoutingPolicyRuleRequestAction `json:"action,omitempty"`
	Comments         *string                                        `json:"comments,omitempty"`
	CustomFields     *map[string]interface{}                        `json:"custom_fields,omitempty"`
	Description      *string                                        `json:"description,omitempty"`
	Index            *int                                           `json:"index,omitempty"`
	MatchCommunity   *[]int                                         `json:"match_community,omitempty"`
	MatchCustom      *interface{}                                   `json:"match_custom"`
	MatchIpAddress   *[]int                                         `json:"match_ip_address,omitempty"`
	MatchIpv6Address *[]int                                         `json:"match_ipv6_address,omitempty"`
	RoutingPolicy    *int                                           `json:"routing_policy,omitempty"`
	SetActions       *interface{}                                   `json:"set_actions"`
	Tags             *[]NestedTagRequest                            `json:"tags,omitempty"`
}

// PatchedWritableRoutingPolicyRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type PatchedWritableRoutingPolicyRuleRequestAction string

// PrefixList Adds support for custom fields and tags.
type PrefixList struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`
	Display      *string                 `json:"display,omitempty"`

	// Family * `ipv4` - IPv4
	// * `ipv6` - IPv6
	Family PrefixListFamily `json:"family"`
	Id     *int             `json:"id,omitempty"`
	Name   string           `json:"name"`
	Tags   *[]NestedTag     `json:"tags,omitempty"`
}

// PrefixListFamily * `ipv4` - IPv4
// * `ipv6` - IPv6
type PrefixListFamily string

// PrefixListRequest Adds support for custom fields and tags.
type PrefixListRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`

	// Family * `ipv4` - IPv4
	// * `ipv6` - IPv6
	Family PrefixListRequestFamily `json:"family"`
	Name   string                  `json:"name"`
	Tags   *[]NestedTagRequest     `json:"tags,omitempty"`
}

// PrefixListRequestFamily * `ipv4` - IPv4
// * `ipv6` - IPv6
type PrefixListRequestFamily string

// PrefixListRule Adds support for custom fields and tags.
type PrefixListRule struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action       PrefixListRuleAction    `json:"action"`
	Comments     *string                 `json:"comments,omitempty"`
	Created      *time.Time              `json:"created"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Display      *string                 `json:"display,omitempty"`
	Ge           *int                    `json:"ge"`
	Id           *int                    `json:"id,omitempty"`
	Index        int                     `json:"index"`
	LastUpdated  *time.Time              `json:"last_updated"`
	Le           *int                    `json:"le"`
	Prefix       *NestedPrefix           `json:"prefix"`
	PrefixCustom *string                 `json:"prefix_custom"`

	// PrefixList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	PrefixList NestedPrefixList `json:"prefix_list"`
	Tags       *[]NestedTag     `json:"tags,omitempty"`
}

// PrefixListRuleAction * `permit` - Permit
// * `deny` - Deny
type PrefixListRuleAction string

// PrefixListRuleRequest Adds support for custom fields and tags.
type PrefixListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action       PrefixListRuleRequestAction `json:"action"`
	Comments     *string                     `json:"comments,omitempty"`
	CustomFields *map[string]interface{}     `json:"custom_fields,omitempty"`
	Ge           *int                        `json:"ge"`
	Index        int                         `json:"index"`
	Le           *int                        `json:"le"`
	Prefix       *NestedPrefixRequest        `json:"prefix"`
	PrefixCustom *string                     `json:"prefix_custom"`

	// PrefixList Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	PrefixList NestedPrefixListRequest `json:"prefix_list"`
	Tags       *[]NestedTagRequest     `json:"tags,omitempty"`
}

// PrefixListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type PrefixListRuleRequestAction string

// RoutingPolicy Adds support for custom fields and tags.
type RoutingPolicy struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`
	Id           *int                    `json:"id,omitempty"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTag            `json:"tags,omitempty"`
}

// RoutingPolicyRequest Adds support for custom fields and tags.
type RoutingPolicyRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  string                  `json:"description"`
	Name         string                  `json:"name"`
	Tags         *[]NestedTagRequest     `json:"tags,omitempty"`
}

// RoutingPolicyRule Adds support for custom fields and tags.
type RoutingPolicyRule struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action           RoutingPolicyRuleAction `json:"action"`
	Comments         *string                 `json:"comments,omitempty"`
	CustomFields     *map[string]interface{} `json:"custom_fields,omitempty"`
	Description      *string                 `json:"description,omitempty"`
	Display          *string                 `json:"display,omitempty"`
	Id               *int                    `json:"id,omitempty"`
	Index            int                     `json:"index"`
	MatchCommunity   *[]int                  `json:"match_community,omitempty"`
	MatchCustom      *interface{}            `json:"match_custom"`
	MatchIpAddress   *[]int                  `json:"match_ip_address,omitempty"`
	MatchIpv6Address *[]int                  `json:"match_ipv6_address,omitempty"`

	// RoutingPolicy Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RoutingPolicy NestedRoutingPolicy `json:"routing_policy"`
	SetActions    *interface{}        `json:"set_actions"`
	Tags          *[]NestedTag        `json:"tags,omitempty"`
}

// RoutingPolicyRuleAction * `permit` - Permit
// * `deny` - Deny
type RoutingPolicyRuleAction string

// RoutingPolicyRuleRequest Adds support for custom fields and tags.
type RoutingPolicyRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action           RoutingPolicyRuleRequestAction `json:"action"`
	Comments         *string                        `json:"comments,omitempty"`
	CustomFields     *map[string]interface{}        `json:"custom_fields,omitempty"`
	Description      *string                        `json:"description,omitempty"`
	Index            int                            `json:"index"`
	MatchCommunity   *[]int                         `json:"match_community,omitempty"`
	MatchCustom      *interface{}                   `json:"match_custom"`
	MatchIpAddress   *[]int                         `json:"match_ip_address,omitempty"`
	MatchIpv6Address *[]int                         `json:"match_ipv6_address,omitempty"`

	// RoutingPolicy Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a
	// dictionary of attributes which can be used to uniquely identify the related object. This class should be
	// subclassed to return a full representation of the related object on read.
	RoutingPolicy NestedRoutingPolicyRequest `json:"routing_policy"`
	SetActions    *interface{}               `json:"set_actions"`
	Tags          *[]NestedTagRequest        `json:"tags,omitempty"`
}

// RoutingPolicyRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type RoutingPolicyRuleRequestAction string

// WritableBGPSessionRequest Adds support for custom fields and tags.
type WritableBGPSessionRequest struct {
	Comments       *string                 `json:"comments,omitempty"`
	CustomFields   *map[string]interface{} `json:"custom_fields,omitempty"`
	Description    *string                 `json:"description,omitempty"`
	Device         *int                    `json:"device"`
	ExportPolicies *[]int                  `json:"export_policies,omitempty"`
	ImportPolicies *[]int                  `json:"import_policies,omitempty"`
	LocalAddress   int                     `json:"local_address"`
	LocalAs        int                     `json:"local_as"`
	Name           *string                 `json:"name"`
	PeerGroup      *int                    `json:"peer_group"`
	PrefixListIn   *int                    `json:"prefix_list_in"`
	PrefixListOut  *int                    `json:"prefix_list_out"`
	RemoteAddress  int                     `json:"remote_address"`
	RemoteAs       int                     `json:"remote_as"`
	Site           *int                    `json:"site"`

	// Status * `offline` - Offline
	// * `active` - Active
	// * `planned` - Planned
	// * `failed` - Failed
	Status *WritableBGPSessionRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest              `json:"tags,omitempty"`
	Tenant *int                             `json:"tenant"`
}

// WritableBGPSessionRequestStatus * `offline` - Offline
// * `active` - Active
// * `planned` - Planned
// * `failed` - Failed
type WritableBGPSessionRequestStatus string

// WritableCommunityListRuleRequest Adds support for custom fields and tags.
type WritableCommunityListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action        WritableCommunityListRuleRequestAction `json:"action"`
	Comments      *string                                `json:"comments,omitempty"`
	Community     int                                    `json:"community"`
	CommunityList int                                    `json:"community_list"`
	CustomFields  *map[string]interface{}                `json:"custom_fields,omitempty"`
	Tags          *[]NestedTagRequest                    `json:"tags,omitempty"`
}

// WritableCommunityListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type WritableCommunityListRuleRequestAction string

// WritableCommunityRequest Adds support for custom fields and tags.
type WritableCommunityRequest struct {
	Comments     *string                 `json:"comments,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
	Description  *string                 `json:"description,omitempty"`
	Role         *int                    `json:"role"`
	Site         *int                    `json:"site"`

	// Status * `active` - Active
	// * `reserved` - Reserved
	// * `deprecated` - Deprecated
	Status *WritableCommunityRequestStatus `json:"status,omitempty"`
	Tags   *[]NestedTagRequest             `json:"tags,omitempty"`
	Tenant *int                            `json:"tenant"`
	Value  string                          `json:"value"`
}

// WritableCommunityRequestStatus * `active` - Active
// * `reserved` - Reserved
// * `deprecated` - Deprecated
type WritableCommunityRequestStatus string

// WritablePrefixListRuleRequest Adds support for custom fields and tags.
type WritablePrefixListRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action       WritablePrefixListRuleRequestAction `json:"action"`
	Comments     *string                             `json:"comments,omitempty"`
	CustomFields *map[string]interface{}             `json:"custom_fields,omitempty"`
	Ge           *int                                `json:"ge"`
	Index        int                                 `json:"index"`
	Le           *int                                `json:"le"`
	Prefix       *int                                `json:"prefix"`
	PrefixCustom *string                             `json:"prefix_custom"`
	PrefixList   int                                 `json:"prefix_list"`
	Tags         *[]NestedTagRequest                 `json:"tags,omitempty"`
}

// WritablePrefixListRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type WritablePrefixListRuleRequestAction string

// WritableRoutingPolicyRuleRequest Adds support for custom fields and tags.
type WritableRoutingPolicyRuleRequest struct {
	// Action * `permit` - Permit
	// * `deny` - Deny
	Action           WritableRoutingPolicyRuleRequestAction `json:"action"`
	Comments         *string                                `json:"comments,omitempty"`
	CustomFields     *map[string]interface{}                `json:"custom_fields,omitempty"`
	Description      *string                                `json:"description,omitempty"`
	Index            int                                    `json:"index"`
	MatchCommunity   *[]int                                 `json:"match_community,omitempty"`
	MatchCustom      *interface{}                           `json:"match_custom"`
	MatchIpAddress   *[]int                                 `json:"match_ip_address,omitempty"`
	MatchIpv6Address *[]int                                 `json:"match_ipv6_address,omitempty"`
	RoutingPolicy    int                                    `json:"routing_policy"`
	SetActions       *interface{}                           `json:"set_actions"`
	Tags             *[]NestedTagRequest                    `json:"tags,omitempty"`
}

// WritableRoutingPolicyRuleRequestAction * `permit` - Permit
// * `deny` - Deny
type WritableRoutingPolicyRuleRequestAction string

// PluginsBgpBgppeergroupBulkDestroyJSONBody defines parameters for PluginsBgpBgppeergroupBulkDestroy.
type PluginsBgpBgppeergroupBulkDestroyJSONBody = []BGPPeerGroupRequest

// PluginsBgpBgppeergroupBulkDestroyMultipartBody defines parameters for PluginsBgpBgppeergroupBulkDestroy.
type PluginsBgpBgppeergroupBulkDestroyMultipartBody = []BGPPeerGroupRequest

// PluginsBgpBgppeergroupListParams defines parameters for PluginsBgpBgppeergroupList.
type PluginsBgpBgppeergroupListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpBgppeergroupBulkPartialUpdateJSONBody defines parameters for PluginsBgpBgppeergroupBulkPartialUpdate.
type PluginsBgpBgppeergroupBulkPartialUpdateJSONBody = []BGPPeerGroupRequest

// PluginsBgpBgppeergroupBulkPartialUpdateMultipartBody defines parameters for PluginsBgpBgppeergroupBulkPartialUpdate.
type PluginsBgpBgppeergroupBulkPartialUpdateMultipartBody = []BGPPeerGroupRequest

// PluginsBgpBgppeergroupBulkUpdateJSONBody defines parameters for PluginsBgpBgppeergroupBulkUpdate.
type PluginsBgpBgppeergroupBulkUpdateJSONBody = []BGPPeerGroupRequest

// PluginsBgpBgppeergroupBulkUpdateMultipartBody defines parameters for PluginsBgpBgppeergroupBulkUpdate.
type PluginsBgpBgppeergroupBulkUpdateMultipartBody = []BGPPeerGroupRequest

// PluginsBgpBgpsessionBulkDestroyJSONBody defines parameters for PluginsBgpBgpsessionBulkDestroy.
type PluginsBgpBgpsessionBulkDestroyJSONBody = []BGPSessionRequest

// PluginsBgpBgpsessionBulkDestroyMultipartBody defines parameters for PluginsBgpBgpsessionBulkDestroy.
type PluginsBgpBgpsessionBulkDestroyMultipartBody = []BGPSessionRequest

// PluginsBgpBgpsessionListParams defines parameters for PluginsBgpBgpsessionList.
type PluginsBgpBgpsessionListParams struct {
	// ByLocalAddress Local Address
	ByLocalAddress *string `form:"by_local_address,omitempty" json:"by_local_address,omitempty"`

	// ByRemoteAddress Remote Address
	ByRemoteAddress  *string             `form:"by_remote_address,omitempty" json:"by_remote_address,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`

	// Device Device (name)
	Device *[]string `form:"device,omitempty" json:"device,omitempty"`

	// DeviceN Device (name)
	DeviceN *[]string `form:"device__n,omitempty" json:"device__n,omitempty"`

	// DeviceId Device (ID)
	DeviceId *[]int `form:"device_id,omitempty" json:"device_id,omitempty"`

	// DeviceIdN Device (ID)
	DeviceIdN        *[]int       `form:"device_id__n,omitempty" json:"device_id__n,omitempty"`
	ExportPolicies   *[]int       `form:"export_policies,omitempty" json:"export_policies,omitempty"`
	ExportPoliciesN  *[]int       `form:"export_policies__n,omitempty" json:"export_policies__n,omitempty"`
	Id               *[]int32     `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool        `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32     `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32     `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32     `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32     `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32     `form:"id__n,omitempty" json:"id__n,omitempty"`
	ImportPolicies   *[]int       `form:"import_policies,omitempty" json:"import_policies,omitempty"`
	ImportPoliciesN  *[]int       `form:"import_policies__n,omitempty" json:"import_policies__n,omitempty"`
	LastUpdated      *[]time.Time `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// LocalAddress Local Address
	LocalAddress *[]string `form:"local_address,omitempty" json:"local_address,omitempty"`

	// LocalAddressN Local Address
	LocalAddressN *[]string `form:"local_address__n,omitempty" json:"local_address__n,omitempty"`

	// LocalAddressId Local Address (ID)
	LocalAddressId *[]int `form:"local_address_id,omitempty" json:"local_address_id,omitempty"`

	// LocalAddressIdN Local Address (ID)
	LocalAddressIdN *[]int `form:"local_address_id__n,omitempty" json:"local_address_id__n,omitempty"`

	// LocalAs Local AS (Number)
	LocalAs *[]int64 `form:"local_as,omitempty" json:"local_as,omitempty"`

	// LocalAsN Local AS (Number)
	LocalAsN *[]int64 `form:"local_as__n,omitempty" json:"local_as__n,omitempty"`

	// LocalAsId Local AS (ID)
	LocalAsId *[]int `form:"local_as_id,omitempty" json:"local_as_id,omitempty"`

	// LocalAsIdN Local AS (ID)
	LocalAsIdN        *[]int              `form:"local_as_id__n,omitempty" json:"local_as_id__n,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering   *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	PeerGroup  *[]int  `form:"peer_group,omitempty" json:"peer_group,omitempty"`
	PeerGroupN *[]int  `form:"peer_group__n,omitempty" json:"peer_group__n,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// RemoteAddress Remote Address
	RemoteAddress *[]string `form:"remote_address,omitempty" json:"remote_address,omitempty"`

	// RemoteAddressN Remote Address
	RemoteAddressN *[]string `form:"remote_address__n,omitempty" json:"remote_address__n,omitempty"`

	// RemoteAddressId Remote Address (ID)
	RemoteAddressId *[]int `form:"remote_address_id,omitempty" json:"remote_address_id,omitempty"`

	// RemoteAddressIdN Remote Address (ID)
	RemoteAddressIdN *[]int `form:"remote_address_id__n,omitempty" json:"remote_address_id__n,omitempty"`

	// RemoteAs Remote AS (Number)
	RemoteAs *[]int64 `form:"remote_as,omitempty" json:"remote_as,omitempty"`

	// RemoteAsN Remote AS (Number)
	RemoteAsN *[]int64 `form:"remote_as__n,omitempty" json:"remote_as__n,omitempty"`

	// RemoteAsId Remote AS (ID)
	RemoteAsId *[]int `form:"remote_as_id,omitempty" json:"remote_as_id,omitempty"`

	// RemoteAsIdN Remote AS (ID)
	RemoteAsIdN *[]int `form:"remote_as_id__n,omitempty" json:"remote_as_id__n,omitempty"`

	// Site DSite (name)
	Site *[]string `form:"site,omitempty" json:"site,omitempty"`

	// SiteN DSite (name)
	SiteN *[]string `form:"site__n,omitempty" json:"site__n,omitempty"`

	// SiteId Site (ID)
	SiteId *[]int `form:"site_id,omitempty" json:"site_id,omitempty"`

	// SiteIdN Site (ID)
	SiteIdN          *[]int              `form:"site_id__n,omitempty" json:"site_id__n,omitempty"`
	Status           *string             `form:"status,omitempty" json:"status,omitempty"`
	StatusN          *string             `form:"status__n,omitempty" json:"status__n,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	Tenant           *int                `form:"tenant,omitempty" json:"tenant,omitempty"`
	TenantN          *int                `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpBgpsessionBulkPartialUpdateJSONBody defines parameters for PluginsBgpBgpsessionBulkPartialUpdate.
type PluginsBgpBgpsessionBulkPartialUpdateJSONBody = []BGPSessionRequest

// PluginsBgpBgpsessionBulkPartialUpdateMultipartBody defines parameters for PluginsBgpBgpsessionBulkPartialUpdate.
type PluginsBgpBgpsessionBulkPartialUpdateMultipartBody = []BGPSessionRequest

// PluginsBgpBgpsessionBulkUpdateJSONBody defines parameters for PluginsBgpBgpsessionBulkUpdate.
type PluginsBgpBgpsessionBulkUpdateJSONBody = []BGPSessionRequest

// PluginsBgpBgpsessionBulkUpdateMultipartBody defines parameters for PluginsBgpBgpsessionBulkUpdate.
type PluginsBgpBgpsessionBulkUpdateMultipartBody = []BGPSessionRequest

// PluginsBgpCommunityListRuleBulkDestroyJSONBody defines parameters for PluginsBgpCommunityListRuleBulkDestroy.
type PluginsBgpCommunityListRuleBulkDestroyJSONBody = []CommunityListRuleRequest

// PluginsBgpCommunityListRuleBulkDestroyMultipartBody defines parameters for PluginsBgpCommunityListRuleBulkDestroy.
type PluginsBgpCommunityListRuleBulkDestroyMultipartBody = []CommunityListRuleRequest

// PluginsBgpCommunityListRuleListParams defines parameters for PluginsBgpCommunityListRuleList.
type PluginsBgpCommunityListRuleListParams struct {
	Action           *string             `form:"action,omitempty" json:"action,omitempty"`
	ActionN          *string             `form:"action__n,omitempty" json:"action__n,omitempty"`
	CommunityList    *int                `form:"community_list,omitempty" json:"community_list,omitempty"`
	CommunityListN   *int                `form:"community_list__n,omitempty" json:"community_list__n,omitempty"`
	CommunityListId  *int                `form:"community_list_id,omitempty" json:"community_list_id,omitempty"`
	CommunityListIdN *int                `form:"community_list_id__n,omitempty" json:"community_list_id__n,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpCommunityListRuleBulkPartialUpdateJSONBody defines parameters for PluginsBgpCommunityListRuleBulkPartialUpdate.
type PluginsBgpCommunityListRuleBulkPartialUpdateJSONBody = []CommunityListRuleRequest

// PluginsBgpCommunityListRuleBulkPartialUpdateMultipartBody defines parameters for PluginsBgpCommunityListRuleBulkPartialUpdate.
type PluginsBgpCommunityListRuleBulkPartialUpdateMultipartBody = []CommunityListRuleRequest

// PluginsBgpCommunityListRuleBulkUpdateJSONBody defines parameters for PluginsBgpCommunityListRuleBulkUpdate.
type PluginsBgpCommunityListRuleBulkUpdateJSONBody = []CommunityListRuleRequest

// PluginsBgpCommunityListRuleBulkUpdateMultipartBody defines parameters for PluginsBgpCommunityListRuleBulkUpdate.
type PluginsBgpCommunityListRuleBulkUpdateMultipartBody = []CommunityListRuleRequest

// PluginsBgpCommunityListBulkDestroyJSONBody defines parameters for PluginsBgpCommunityListBulkDestroy.
type PluginsBgpCommunityListBulkDestroyJSONBody = []CommunityListRequest

// PluginsBgpCommunityListBulkDestroyMultipartBody defines parameters for PluginsBgpCommunityListBulkDestroy.
type PluginsBgpCommunityListBulkDestroyMultipartBody = []CommunityListRequest

// PluginsBgpCommunityListListParams defines parameters for PluginsBgpCommunityListList.
type PluginsBgpCommunityListListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpCommunityListBulkPartialUpdateJSONBody defines parameters for PluginsBgpCommunityListBulkPartialUpdate.
type PluginsBgpCommunityListBulkPartialUpdateJSONBody = []CommunityListRequest

// PluginsBgpCommunityListBulkPartialUpdateMultipartBody defines parameters for PluginsBgpCommunityListBulkPartialUpdate.
type PluginsBgpCommunityListBulkPartialUpdateMultipartBody = []CommunityListRequest

// PluginsBgpCommunityListBulkUpdateJSONBody defines parameters for PluginsBgpCommunityListBulkUpdate.
type PluginsBgpCommunityListBulkUpdateJSONBody = []CommunityListRequest

// PluginsBgpCommunityListBulkUpdateMultipartBody defines parameters for PluginsBgpCommunityListBulkUpdate.
type PluginsBgpCommunityListBulkUpdateMultipartBody = []CommunityListRequest

// PluginsBgpCommunityBulkDestroyJSONBody defines parameters for PluginsBgpCommunityBulkDestroy.
type PluginsBgpCommunityBulkDestroyJSONBody = []CommunityRequest

// PluginsBgpCommunityBulkDestroyMultipartBody defines parameters for PluginsBgpCommunityBulkDestroy.
type PluginsBgpCommunityBulkDestroyMultipartBody = []CommunityRequest

// PluginsBgpCommunityListParams defines parameters for PluginsBgpCommunityList.
type PluginsBgpCommunityListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Status           *string             `form:"status,omitempty" json:"status,omitempty"`
	StatusN          *string             `form:"status__n,omitempty" json:"status__n,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	Tenant           *int                `form:"tenant,omitempty" json:"tenant,omitempty"`
	TenantN          *int                `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
	Value            *[]string           `form:"value,omitempty" json:"value,omitempty"`
	ValueEmpty       *bool               `form:"value__empty,omitempty" json:"value__empty,omitempty"`
	ValueIc          *[]string           `form:"value__ic,omitempty" json:"value__ic,omitempty"`
	ValueIe          *[]string           `form:"value__ie,omitempty" json:"value__ie,omitempty"`
	ValueIew         *[]string           `form:"value__iew,omitempty" json:"value__iew,omitempty"`
	ValueIsw         *[]string           `form:"value__isw,omitempty" json:"value__isw,omitempty"`
	ValueN           *[]string           `form:"value__n,omitempty" json:"value__n,omitempty"`
	ValueNic         *[]string           `form:"value__nic,omitempty" json:"value__nic,omitempty"`
	ValueNie         *[]string           `form:"value__nie,omitempty" json:"value__nie,omitempty"`
	ValueNiew        *[]string           `form:"value__niew,omitempty" json:"value__niew,omitempty"`
	ValueNisw        *[]string           `form:"value__nisw,omitempty" json:"value__nisw,omitempty"`
}

// PluginsBgpCommunityBulkPartialUpdateJSONBody defines parameters for PluginsBgpCommunityBulkPartialUpdate.
type PluginsBgpCommunityBulkPartialUpdateJSONBody = []CommunityRequest

// PluginsBgpCommunityBulkPartialUpdateMultipartBody defines parameters for PluginsBgpCommunityBulkPartialUpdate.
type PluginsBgpCommunityBulkPartialUpdateMultipartBody = []CommunityRequest

// PluginsBgpCommunityBulkUpdateJSONBody defines parameters for PluginsBgpCommunityBulkUpdate.
type PluginsBgpCommunityBulkUpdateJSONBody = []CommunityRequest

// PluginsBgpCommunityBulkUpdateMultipartBody defines parameters for PluginsBgpCommunityBulkUpdate.
type PluginsBgpCommunityBulkUpdateMultipartBody = []CommunityRequest

// PluginsBgpPeerGroupBulkDestroyJSONBody defines parameters for PluginsBgpPeerGroupBulkDestroy.
type PluginsBgpPeerGroupBulkDestroyJSONBody = []BGPPeerGroupRequest

// PluginsBgpPeerGroupBulkDestroyMultipartBody defines parameters for PluginsBgpPeerGroupBulkDestroy.
type PluginsBgpPeerGroupBulkDestroyMultipartBody = []BGPPeerGroupRequest

// PluginsBgpPeerGroupListParams defines parameters for PluginsBgpPeerGroupList.
type PluginsBgpPeerGroupListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpPeerGroupBulkPartialUpdateJSONBody defines parameters for PluginsBgpPeerGroupBulkPartialUpdate.
type PluginsBgpPeerGroupBulkPartialUpdateJSONBody = []BGPPeerGroupRequest

// PluginsBgpPeerGroupBulkPartialUpdateMultipartBody defines parameters for PluginsBgpPeerGroupBulkPartialUpdate.
type PluginsBgpPeerGroupBulkPartialUpdateMultipartBody = []BGPPeerGroupRequest

// PluginsBgpPeerGroupBulkUpdateJSONBody defines parameters for PluginsBgpPeerGroupBulkUpdate.
type PluginsBgpPeerGroupBulkUpdateJSONBody = []BGPPeerGroupRequest

// PluginsBgpPeerGroupBulkUpdateMultipartBody defines parameters for PluginsBgpPeerGroupBulkUpdate.
type PluginsBgpPeerGroupBulkUpdateMultipartBody = []BGPPeerGroupRequest

// PluginsBgpPrefixListRuleBulkDestroyJSONBody defines parameters for PluginsBgpPrefixListRuleBulkDestroy.
type PluginsBgpPrefixListRuleBulkDestroyJSONBody = []PrefixListRuleRequest

// PluginsBgpPrefixListRuleBulkDestroyMultipartBody defines parameters for PluginsBgpPrefixListRuleBulkDestroy.
type PluginsBgpPrefixListRuleBulkDestroyMultipartBody = []PrefixListRuleRequest

// PluginsBgpPrefixListRuleListParams defines parameters for PluginsBgpPrefixListRuleList.
type PluginsBgpPrefixListRuleListParams struct {
	Action           *string             `form:"action,omitempty" json:"action,omitempty"`
	ActionN          *string             `form:"action__n,omitempty" json:"action__n,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Ge               *[]int32            `form:"ge,omitempty" json:"ge,omitempty"`
	GeEmpty          *bool               `form:"ge__empty,omitempty" json:"ge__empty,omitempty"`
	GeGt             *[]int32            `form:"ge__gt,omitempty" json:"ge__gt,omitempty"`
	GeGte            *[]int32            `form:"ge__gte,omitempty" json:"ge__gte,omitempty"`
	GeLt             *[]int32            `form:"ge__lt,omitempty" json:"ge__lt,omitempty"`
	GeLte            *[]int32            `form:"ge__lte,omitempty" json:"ge__lte,omitempty"`
	GeN              *[]int32            `form:"ge__n,omitempty" json:"ge__n,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	Index            *[]int32            `form:"index,omitempty" json:"index,omitempty"`
	IndexEmpty       *bool               `form:"index__empty,omitempty" json:"index__empty,omitempty"`
	IndexGt          *[]int32            `form:"index__gt,omitempty" json:"index__gt,omitempty"`
	IndexGte         *[]int32            `form:"index__gte,omitempty" json:"index__gte,omitempty"`
	IndexLt          *[]int32            `form:"index__lt,omitempty" json:"index__lt,omitempty"`
	IndexLte         *[]int32            `form:"index__lte,omitempty" json:"index__lte,omitempty"`
	IndexN           *[]int32            `form:"index__n,omitempty" json:"index__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`
	Le               *[]int32            `form:"le,omitempty" json:"le,omitempty"`
	LeEmpty          *bool               `form:"le__empty,omitempty" json:"le__empty,omitempty"`
	LeGt             *[]int32            `form:"le__gt,omitempty" json:"le__gt,omitempty"`
	LeGte            *[]int32            `form:"le__gte,omitempty" json:"le__gte,omitempty"`
	LeLt             *[]int32            `form:"le__lt,omitempty" json:"le__lt,omitempty"`
	LeLte            *[]int32            `form:"le__lte,omitempty" json:"le__lte,omitempty"`
	LeN              *[]int32            `form:"le__n,omitempty" json:"le__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering      *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	PrefixList    *int    `form:"prefix_list,omitempty" json:"prefix_list,omitempty"`
	PrefixListN   *int    `form:"prefix_list__n,omitempty" json:"prefix_list__n,omitempty"`
	PrefixListId  *int    `form:"prefix_list_id,omitempty" json:"prefix_list_id,omitempty"`
	PrefixListIdN *int    `form:"prefix_list_id__n,omitempty" json:"prefix_list_id__n,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpPrefixListRuleBulkPartialUpdateJSONBody defines parameters for PluginsBgpPrefixListRuleBulkPartialUpdate.
type PluginsBgpPrefixListRuleBulkPartialUpdateJSONBody = []PrefixListRuleRequest

// PluginsBgpPrefixListRuleBulkPartialUpdateMultipartBody defines parameters for PluginsBgpPrefixListRuleBulkPartialUpdate.
type PluginsBgpPrefixListRuleBulkPartialUpdateMultipartBody = []PrefixListRuleRequest

// PluginsBgpPrefixListRuleBulkUpdateJSONBody defines parameters for PluginsBgpPrefixListRuleBulkUpdate.
type PluginsBgpPrefixListRuleBulkUpdateJSONBody = []PrefixListRuleRequest

// PluginsBgpPrefixListRuleBulkUpdateMultipartBody defines parameters for PluginsBgpPrefixListRuleBulkUpdate.
type PluginsBgpPrefixListRuleBulkUpdateMultipartBody = []PrefixListRuleRequest

// PluginsBgpPrefixListBulkDestroyJSONBody defines parameters for PluginsBgpPrefixListBulkDestroy.
type PluginsBgpPrefixListBulkDestroyJSONBody = []PrefixListRequest

// PluginsBgpPrefixListBulkDestroyMultipartBody defines parameters for PluginsBgpPrefixListBulkDestroy.
type PluginsBgpPrefixListBulkDestroyMultipartBody = []PrefixListRequest

// PluginsBgpPrefixListListParams defines parameters for PluginsBgpPrefixListList.
type PluginsBgpPrefixListListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpPrefixListBulkPartialUpdateJSONBody defines parameters for PluginsBgpPrefixListBulkPartialUpdate.
type PluginsBgpPrefixListBulkPartialUpdateJSONBody = []PrefixListRequest

// PluginsBgpPrefixListBulkPartialUpdateMultipartBody defines parameters for PluginsBgpPrefixListBulkPartialUpdate.
type PluginsBgpPrefixListBulkPartialUpdateMultipartBody = []PrefixListRequest

// PluginsBgpPrefixListBulkUpdateJSONBody defines parameters for PluginsBgpPrefixListBulkUpdate.
type PluginsBgpPrefixListBulkUpdateJSONBody = []PrefixListRequest

// PluginsBgpPrefixListBulkUpdateMultipartBody defines parameters for PluginsBgpPrefixListBulkUpdate.
type PluginsBgpPrefixListBulkUpdateMultipartBody = []PrefixListRequest

// PluginsBgpRoutingPolicyRuleBulkDestroyJSONBody defines parameters for PluginsBgpRoutingPolicyRuleBulkDestroy.
type PluginsBgpRoutingPolicyRuleBulkDestroyJSONBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleBulkDestroyMultipartBody defines parameters for PluginsBgpRoutingPolicyRuleBulkDestroy.
type PluginsBgpRoutingPolicyRuleBulkDestroyMultipartBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleListParams defines parameters for PluginsBgpRoutingPolicyRuleList.
type PluginsBgpRoutingPolicyRuleListParams struct {
	Action             *string             `form:"action,omitempty" json:"action,omitempty"`
	ActionN            *string             `form:"action__n,omitempty" json:"action__n,omitempty"`
	ContinueEntry      *[]int32            `form:"continue_entry,omitempty" json:"continue_entry,omitempty"`
	ContinueEntryEmpty *bool               `form:"continue_entry__empty,omitempty" json:"continue_entry__empty,omitempty"`
	ContinueEntryGt    *[]int32            `form:"continue_entry__gt,omitempty" json:"continue_entry__gt,omitempty"`
	ContinueEntryGte   *[]int32            `form:"continue_entry__gte,omitempty" json:"continue_entry__gte,omitempty"`
	ContinueEntryLt    *[]int32            `form:"continue_entry__lt,omitempty" json:"continue_entry__lt,omitempty"`
	ContinueEntryLte   *[]int32            `form:"continue_entry__lte,omitempty" json:"continue_entry__lte,omitempty"`
	ContinueEntryN     *[]int32            `form:"continue_entry__n,omitempty" json:"continue_entry__n,omitempty"`
	Created            *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty       *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt          *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte         *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt          *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte         *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN           *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest   *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description        *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty   *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc      *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe      *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew     *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw     *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN       *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic     *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie     *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew    *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw    *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id                 *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty            *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt               *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte              *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt               *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte              *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN                *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	Index              *[]int32            `form:"index,omitempty" json:"index,omitempty"`
	IndexEmpty         *bool               `form:"index__empty,omitempty" json:"index__empty,omitempty"`
	IndexGt            *[]int32            `form:"index__gt,omitempty" json:"index__gt,omitempty"`
	IndexGte           *[]int32            `form:"index__gte,omitempty" json:"index__gte,omitempty"`
	IndexLt            *[]int32            `form:"index__lt,omitempty" json:"index__lt,omitempty"`
	IndexLte           *[]int32            `form:"index__lte,omitempty" json:"index__lte,omitempty"`
	IndexN             *[]int32            `form:"index__n,omitempty" json:"index__n,omitempty"`
	LastUpdated        *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty   *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt      *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte     *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt      *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte     *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN       *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	RoutingPolicyId  *int                `form:"routing_policy_id,omitempty" json:"routing_policy_id,omitempty"`
	RoutingPolicyIdN *int                `form:"routing_policy_id__n,omitempty" json:"routing_policy_id__n,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONBody defines parameters for PluginsBgpRoutingPolicyRuleBulkPartialUpdate.
type PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleBulkPartialUpdateMultipartBody defines parameters for PluginsBgpRoutingPolicyRuleBulkPartialUpdate.
type PluginsBgpRoutingPolicyRuleBulkPartialUpdateMultipartBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleBulkUpdateJSONBody defines parameters for PluginsBgpRoutingPolicyRuleBulkUpdate.
type PluginsBgpRoutingPolicyRuleBulkUpdateJSONBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleBulkUpdateMultipartBody defines parameters for PluginsBgpRoutingPolicyRuleBulkUpdate.
type PluginsBgpRoutingPolicyRuleBulkUpdateMultipartBody = []RoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyBulkDestroyJSONBody defines parameters for PluginsBgpRoutingPolicyBulkDestroy.
type PluginsBgpRoutingPolicyBulkDestroyJSONBody = []RoutingPolicyRequest

// PluginsBgpRoutingPolicyBulkDestroyMultipartBody defines parameters for PluginsBgpRoutingPolicyBulkDestroy.
type PluginsBgpRoutingPolicyBulkDestroyMultipartBody = []RoutingPolicyRequest

// PluginsBgpRoutingPolicyListParams defines parameters for PluginsBgpRoutingPolicyList.
type PluginsBgpRoutingPolicyListParams struct {
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`
	Id               *[]int32            `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool               `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32            `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32            `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32            `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32            `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32            `form:"id__n,omitempty" json:"id__n,omitempty"`
	LastUpdated      *[]time.Time        `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time        `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time        `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time        `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time        `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time        `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time        `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit             *int                `form:"limit,omitempty" json:"limit,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering *string `form:"ordering,omitempty" json:"ordering,omitempty"`

	// Q Search
	Q                *string             `form:"q,omitempty" json:"q,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpRoutingPolicyBulkPartialUpdateJSONBody defines parameters for PluginsBgpRoutingPolicyBulkPartialUpdate.
type PluginsBgpRoutingPolicyBulkPartialUpdateJSONBody = []RoutingPolicyRequest

// PluginsBgpRoutingPolicyBulkPartialUpdateMultipartBody defines parameters for PluginsBgpRoutingPolicyBulkPartialUpdate.
type PluginsBgpRoutingPolicyBulkPartialUpdateMultipartBody = []RoutingPolicyRequest

// PluginsBgpRoutingPolicyBulkUpdateJSONBody defines parameters for PluginsBgpRoutingPolicyBulkUpdate.
type PluginsBgpRoutingPolicyBulkUpdateJSONBody = []RoutingPolicyRequest

// PluginsBgpRoutingPolicyBulkUpdateMultipartBody defines parameters for PluginsBgpRoutingPolicyBulkUpdate.
type PluginsBgpRoutingPolicyBulkUpdateMultipartBody = []RoutingPolicyRequest

// PluginsBgpSessionBulkDestroyJSONBody defines parameters for PluginsBgpSessionBulkDestroy.
type PluginsBgpSessionBulkDestroyJSONBody = []BGPSessionRequest

// PluginsBgpSessionBulkDestroyMultipartBody defines parameters for PluginsBgpSessionBulkDestroy.
type PluginsBgpSessionBulkDestroyMultipartBody = []BGPSessionRequest

// PluginsBgpSessionListParams defines parameters for PluginsBgpSessionList.
type PluginsBgpSessionListParams struct {
	// ByLocalAddress Local Address
	ByLocalAddress *string `form:"by_local_address,omitempty" json:"by_local_address,omitempty"`

	// ByRemoteAddress Remote Address
	ByRemoteAddress  *string             `form:"by_remote_address,omitempty" json:"by_remote_address,omitempty"`
	Created          *[]time.Time        `form:"created,omitempty" json:"created,omitempty"`
	CreatedEmpty     *[]time.Time        `form:"created__empty,omitempty" json:"created__empty,omitempty"`
	CreatedGt        *[]time.Time        `form:"created__gt,omitempty" json:"created__gt,omitempty"`
	CreatedGte       *[]time.Time        `form:"created__gte,omitempty" json:"created__gte,omitempty"`
	CreatedLt        *[]time.Time        `form:"created__lt,omitempty" json:"created__lt,omitempty"`
	CreatedLte       *[]time.Time        `form:"created__lte,omitempty" json:"created__lte,omitempty"`
	CreatedN         *[]time.Time        `form:"created__n,omitempty" json:"created__n,omitempty"`
	CreatedByRequest *openapi_types.UUID `form:"created_by_request,omitempty" json:"created_by_request,omitempty"`
	Description      *[]string           `form:"description,omitempty" json:"description,omitempty"`
	DescriptionEmpty *bool               `form:"description__empty,omitempty" json:"description__empty,omitempty"`
	DescriptionIc    *[]string           `form:"description__ic,omitempty" json:"description__ic,omitempty"`
	DescriptionIe    *[]string           `form:"description__ie,omitempty" json:"description__ie,omitempty"`
	DescriptionIew   *[]string           `form:"description__iew,omitempty" json:"description__iew,omitempty"`
	DescriptionIsw   *[]string           `form:"description__isw,omitempty" json:"description__isw,omitempty"`
	DescriptionN     *[]string           `form:"description__n,omitempty" json:"description__n,omitempty"`
	DescriptionNic   *[]string           `form:"description__nic,omitempty" json:"description__nic,omitempty"`
	DescriptionNie   *[]string           `form:"description__nie,omitempty" json:"description__nie,omitempty"`
	DescriptionNiew  *[]string           `form:"description__niew,omitempty" json:"description__niew,omitempty"`
	DescriptionNisw  *[]string           `form:"description__nisw,omitempty" json:"description__nisw,omitempty"`

	// Device Device (name)
	Device *[]string `form:"device,omitempty" json:"device,omitempty"`

	// DeviceN Device (name)
	DeviceN *[]string `form:"device__n,omitempty" json:"device__n,omitempty"`

	// DeviceId Device (ID)
	DeviceId *[]int `form:"device_id,omitempty" json:"device_id,omitempty"`

	// DeviceIdN Device (ID)
	DeviceIdN        *[]int       `form:"device_id__n,omitempty" json:"device_id__n,omitempty"`
	ExportPolicies   *[]int       `form:"export_policies,omitempty" json:"export_policies,omitempty"`
	ExportPoliciesN  *[]int       `form:"export_policies__n,omitempty" json:"export_policies__n,omitempty"`
	Id               *[]int32     `form:"id,omitempty" json:"id,omitempty"`
	IdEmpty          *bool        `form:"id__empty,omitempty" json:"id__empty,omitempty"`
	IdGt             *[]int32     `form:"id__gt,omitempty" json:"id__gt,omitempty"`
	IdGte            *[]int32     `form:"id__gte,omitempty" json:"id__gte,omitempty"`
	IdLt             *[]int32     `form:"id__lt,omitempty" json:"id__lt,omitempty"`
	IdLte            *[]int32     `form:"id__lte,omitempty" json:"id__lte,omitempty"`
	IdN              *[]int32     `form:"id__n,omitempty" json:"id__n,omitempty"`
	ImportPolicies   *[]int       `form:"import_policies,omitempty" json:"import_policies,omitempty"`
	ImportPoliciesN  *[]int       `form:"import_policies__n,omitempty" json:"import_policies__n,omitempty"`
	LastUpdated      *[]time.Time `form:"last_updated,omitempty" json:"last_updated,omitempty"`
	LastUpdatedEmpty *[]time.Time `form:"last_updated__empty,omitempty" json:"last_updated__empty,omitempty"`
	LastUpdatedGt    *[]time.Time `form:"last_updated__gt,omitempty" json:"last_updated__gt,omitempty"`
	LastUpdatedGte   *[]time.Time `form:"last_updated__gte,omitempty" json:"last_updated__gte,omitempty"`
	LastUpdatedLt    *[]time.Time `form:"last_updated__lt,omitempty" json:"last_updated__lt,omitempty"`
	LastUpdatedLte   *[]time.Time `form:"last_updated__lte,omitempty" json:"last_updated__lte,omitempty"`
	LastUpdatedN     *[]time.Time `form:"last_updated__n,omitempty" json:"last_updated__n,omitempty"`

	// Limit Number of results to return per page.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// LocalAddress Local Address
	LocalAddress *[]string `form:"local_address,omitempty" json:"local_address,omitempty"`

	// LocalAddressN Local Address
	LocalAddressN *[]string `form:"local_address__n,omitempty" json:"local_address__n,omitempty"`

	// LocalAddressId Local Address (ID)
	LocalAddressId *[]int `form:"local_address_id,omitempty" json:"local_address_id,omitempty"`

	// LocalAddressIdN Local Address (ID)
	LocalAddressIdN *[]int `form:"local_address_id__n,omitempty" json:"local_address_id__n,omitempty"`

	// LocalAs Local AS (Number)
	LocalAs *[]int64 `form:"local_as,omitempty" json:"local_as,omitempty"`

	// LocalAsN Local AS (Number)
	LocalAsN *[]int64 `form:"local_as__n,omitempty" json:"local_as__n,omitempty"`

	// LocalAsId Local AS (ID)
	LocalAsId *[]int `form:"local_as_id,omitempty" json:"local_as_id,omitempty"`

	// LocalAsIdN Local AS (ID)
	LocalAsIdN        *[]int              `form:"local_as_id__n,omitempty" json:"local_as_id__n,omitempty"`
	ModifiedByRequest *openapi_types.UUID `form:"modified_by_request,omitempty" json:"modified_by_request,omitempty"`
	Name              *[]string           `form:"name,omitempty" json:"name,omitempty"`
	NameEmpty         *bool               `form:"name__empty,omitempty" json:"name__empty,omitempty"`
	NameIc            *[]string           `form:"name__ic,omitempty" json:"name__ic,omitempty"`
	NameIe            *[]string           `form:"name__ie,omitempty" json:"name__ie,omitempty"`
	NameIew           *[]string           `form:"name__iew,omitempty" json:"name__iew,omitempty"`
	NameIsw           *[]string           `form:"name__isw,omitempty" json:"name__isw,omitempty"`
	NameN             *[]string           `form:"name__n,omitempty" json:"name__n,omitempty"`
	NameNic           *[]string           `form:"name__nic,omitempty" json:"name__nic,omitempty"`
	NameNie           *[]string           `form:"name__nie,omitempty" json:"name__nie,omitempty"`
	NameNiew          *[]string           `form:"name__niew,omitempty" json:"name__niew,omitempty"`
	NameNisw          *[]string           `form:"name__nisw,omitempty" json:"name__nisw,omitempty"`

	// Offset The initial index from which to return the results.
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Ordering Which field to use when ordering the results.
	Ordering   *string `form:"ordering,omitempty" json:"ordering,omitempty"`
	PeerGroup  *[]int  `form:"peer_group,omitempty" json:"peer_group,omitempty"`
	PeerGroupN *[]int  `form:"peer_group__n,omitempty" json:"peer_group__n,omitempty"`

	// Q Search
	Q *string `form:"q,omitempty" json:"q,omitempty"`

	// RemoteAddress Remote Address
	RemoteAddress *[]string `form:"remote_address,omitempty" json:"remote_address,omitempty"`

	// RemoteAddressN Remote Address
	RemoteAddressN *[]string `form:"remote_address__n,omitempty" json:"remote_address__n,omitempty"`

	// RemoteAddressId Remote Address (ID)
	RemoteAddressId *[]int `form:"remote_address_id,omitempty" json:"remote_address_id,omitempty"`

	// RemoteAddressIdN Remote Address (ID)
	RemoteAddressIdN *[]int `form:"remote_address_id__n,omitempty" json:"remote_address_id__n,omitempty"`

	// RemoteAs Remote AS (Number)
	RemoteAs *[]int64 `form:"remote_as,omitempty" json:"remote_as,omitempty"`

	// RemoteAsN Remote AS (Number)
	RemoteAsN *[]int64 `form:"remote_as__n,omitempty" json:"remote_as__n,omitempty"`

	// RemoteAsId Remote AS (ID)
	RemoteAsId *[]int `form:"remote_as_id,omitempty" json:"remote_as_id,omitempty"`

	// RemoteAsIdN Remote AS (ID)
	RemoteAsIdN *[]int `form:"remote_as_id__n,omitempty" json:"remote_as_id__n,omitempty"`

	// Site DSite (name)
	Site *[]string `form:"site,omitempty" json:"site,omitempty"`

	// SiteN DSite (name)
	SiteN *[]string `form:"site__n,omitempty" json:"site__n,omitempty"`

	// SiteId Site (ID)
	SiteId *[]int `form:"site_id,omitempty" json:"site_id,omitempty"`

	// SiteIdN Site (ID)
	SiteIdN          *[]int              `form:"site_id__n,omitempty" json:"site_id__n,omitempty"`
	Status           *string             `form:"status,omitempty" json:"status,omitempty"`
	StatusN          *string             `form:"status__n,omitempty" json:"status__n,omitempty"`
	Tag              *[]string           `form:"tag,omitempty" json:"tag,omitempty"`
	TagN             *[]string           `form:"tag__n,omitempty" json:"tag__n,omitempty"`
	Tenant           *int                `form:"tenant,omitempty" json:"tenant,omitempty"`
	TenantN          *int                `form:"tenant__n,omitempty" json:"tenant__n,omitempty"`
	UpdatedByRequest *openapi_types.UUID `form:"updated_by_request,omitempty" json:"updated_by_request,omitempty"`
}

// PluginsBgpSessionBulkPartialUpdateJSONBody defines parameters for PluginsBgpSessionBulkPartialUpdate.
type PluginsBgpSessionBulkPartialUpdateJSONBody = []BGPSessionRequest

// PluginsBgpSessionBulkPartialUpdateMultipartBody defines parameters for PluginsBgpSessionBulkPartialUpdate.
type PluginsBgpSessionBulkPartialUpdateMultipartBody = []BGPSessionRequest

// PluginsBgpSessionBulkUpdateJSONBody defines parameters for PluginsBgpSessionBulkUpdate.
type PluginsBgpSessionBulkUpdateJSONBody = []BGPSessionRequest

// PluginsBgpSessionBulkUpdateMultipartBody defines parameters for PluginsBgpSessionBulkUpdate.
type PluginsBgpSessionBulkUpdateMultipartBody = []BGPSessionRequest

// PluginsBgpBgppeergroupBulkDestroyJSONRequestBody defines body for PluginsBgpBgppeergroupBulkDestroy for application/json ContentType.
type PluginsBgpBgppeergroupBulkDestroyJSONRequestBody = PluginsBgpBgppeergroupBulkDestroyJSONBody

// PluginsBgpBgppeergroupBulkDestroyMultipartRequestBody defines body for PluginsBgpBgppeergroupBulkDestroy for multipart/form-data ContentType.
type PluginsBgpBgppeergroupBulkDestroyMultipartRequestBody = PluginsBgpBgppeergroupBulkDestroyMultipartBody

// PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody defines body for PluginsBgpBgppeergroupBulkPartialUpdate for application/json ContentType.
type PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody = PluginsBgpBgppeergroupBulkPartialUpdateJSONBody

// PluginsBgpBgppeergroupBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpBgppeergroupBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpBgppeergroupBulkPartialUpdateMultipartRequestBody = PluginsBgpBgppeergroupBulkPartialUpdateMultipartBody

// PluginsBgpBgppeergroupCreateJSONRequestBody defines body for PluginsBgpBgppeergroupCreate for application/json ContentType.
type PluginsBgpBgppeergroupCreateJSONRequestBody = BGPPeerGroupRequest

// PluginsBgpBgppeergroupCreateMultipartRequestBody defines body for PluginsBgpBgppeergroupCreate for multipart/form-data ContentType.
type PluginsBgpBgppeergroupCreateMultipartRequestBody = BGPPeerGroupRequest

// PluginsBgpBgppeergroupBulkUpdateJSONRequestBody defines body for PluginsBgpBgppeergroupBulkUpdate for application/json ContentType.
type PluginsBgpBgppeergroupBulkUpdateJSONRequestBody = PluginsBgpBgppeergroupBulkUpdateJSONBody

// PluginsBgpBgppeergroupBulkUpdateMultipartRequestBody defines body for PluginsBgpBgppeergroupBulkUpdate for multipart/form-data ContentType.
type PluginsBgpBgppeergroupBulkUpdateMultipartRequestBody = PluginsBgpBgppeergroupBulkUpdateMultipartBody

// PluginsBgpBgppeergroupPartialUpdateJSONRequestBody defines body for PluginsBgpBgppeergroupPartialUpdate for application/json ContentType.
type PluginsBgpBgppeergroupPartialUpdateJSONRequestBody = PatchedBGPPeerGroupRequest

// PluginsBgpBgppeergroupPartialUpdateMultipartRequestBody defines body for PluginsBgpBgppeergroupPartialUpdate for multipart/form-data ContentType.
type PluginsBgpBgppeergroupPartialUpdateMultipartRequestBody = PatchedBGPPeerGroupRequest

// PluginsBgpBgppeergroupUpdateJSONRequestBody defines body for PluginsBgpBgppeergroupUpdate for application/json ContentType.
type PluginsBgpBgppeergroupUpdateJSONRequestBody = BGPPeerGroupRequest

// PluginsBgpBgppeergroupUpdateMultipartRequestBody defines body for PluginsBgpBgppeergroupUpdate for multipart/form-data ContentType.
type PluginsBgpBgppeergroupUpdateMultipartRequestBody = BGPPeerGroupRequest

// PluginsBgpBgpsessionBulkDestroyJSONRequestBody defines body for PluginsBgpBgpsessionBulkDestroy for application/json ContentType.
type PluginsBgpBgpsessionBulkDestroyJSONRequestBody = PluginsBgpBgpsessionBulkDestroyJSONBody

// PluginsBgpBgpsessionBulkDestroyMultipartRequestBody defines body for PluginsBgpBgpsessionBulkDestroy for multipart/form-data ContentType.
type PluginsBgpBgpsessionBulkDestroyMultipartRequestBody = PluginsBgpBgpsessionBulkDestroyMultipartBody

// PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody defines body for PluginsBgpBgpsessionBulkPartialUpdate for application/json ContentType.
type PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody = PluginsBgpBgpsessionBulkPartialUpdateJSONBody

// PluginsBgpBgpsessionBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpBgpsessionBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpBgpsessionBulkPartialUpdateMultipartRequestBody = PluginsBgpBgpsessionBulkPartialUpdateMultipartBody

// PluginsBgpBgpsessionCreateJSONRequestBody defines body for PluginsBgpBgpsessionCreate for application/json ContentType.
type PluginsBgpBgpsessionCreateJSONRequestBody = WritableBGPSessionRequest

// PluginsBgpBgpsessionCreateMultipartRequestBody defines body for PluginsBgpBgpsessionCreate for multipart/form-data ContentType.
type PluginsBgpBgpsessionCreateMultipartRequestBody = WritableBGPSessionRequest

// PluginsBgpBgpsessionBulkUpdateJSONRequestBody defines body for PluginsBgpBgpsessionBulkUpdate for application/json ContentType.
type PluginsBgpBgpsessionBulkUpdateJSONRequestBody = PluginsBgpBgpsessionBulkUpdateJSONBody

// PluginsBgpBgpsessionBulkUpdateMultipartRequestBody defines body for PluginsBgpBgpsessionBulkUpdate for multipart/form-data ContentType.
type PluginsBgpBgpsessionBulkUpdateMultipartRequestBody = PluginsBgpBgpsessionBulkUpdateMultipartBody

// PluginsBgpBgpsessionPartialUpdateJSONRequestBody defines body for PluginsBgpBgpsessionPartialUpdate for application/json ContentType.
type PluginsBgpBgpsessionPartialUpdateJSONRequestBody = PatchedWritableBGPSessionRequest

// PluginsBgpBgpsessionPartialUpdateMultipartRequestBody defines body for PluginsBgpBgpsessionPartialUpdate for multipart/form-data ContentType.
type PluginsBgpBgpsessionPartialUpdateMultipartRequestBody = PatchedWritableBGPSessionRequest

// PluginsBgpBgpsessionUpdateJSONRequestBody defines body for PluginsBgpBgpsessionUpdate for application/json ContentType.
type PluginsBgpBgpsessionUpdateJSONRequestBody = WritableBGPSessionRequest

// PluginsBgpBgpsessionUpdateMultipartRequestBody defines body for PluginsBgpBgpsessionUpdate for multipart/form-data ContentType.
type PluginsBgpBgpsessionUpdateMultipartRequestBody = WritableBGPSessionRequest

// PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody defines body for PluginsBgpCommunityListRuleBulkDestroy for application/json ContentType.
type PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody = PluginsBgpCommunityListRuleBulkDestroyJSONBody

// PluginsBgpCommunityListRuleBulkDestroyMultipartRequestBody defines body for PluginsBgpCommunityListRuleBulkDestroy for multipart/form-data ContentType.
type PluginsBgpCommunityListRuleBulkDestroyMultipartRequestBody = PluginsBgpCommunityListRuleBulkDestroyMultipartBody

// PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody defines body for PluginsBgpCommunityListRuleBulkPartialUpdate for application/json ContentType.
type PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody = PluginsBgpCommunityListRuleBulkPartialUpdateJSONBody

// PluginsBgpCommunityListRuleBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityListRuleBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListRuleBulkPartialUpdateMultipartRequestBody = PluginsBgpCommunityListRuleBulkPartialUpdateMultipartBody

// PluginsBgpCommunityListRuleCreateJSONRequestBody defines body for PluginsBgpCommunityListRuleCreate for application/json ContentType.
type PluginsBgpCommunityListRuleCreateJSONRequestBody = WritableCommunityListRuleRequest

// PluginsBgpCommunityListRuleCreateMultipartRequestBody defines body for PluginsBgpCommunityListRuleCreate for multipart/form-data ContentType.
type PluginsBgpCommunityListRuleCreateMultipartRequestBody = WritableCommunityListRuleRequest

// PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody defines body for PluginsBgpCommunityListRuleBulkUpdate for application/json ContentType.
type PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody = PluginsBgpCommunityListRuleBulkUpdateJSONBody

// PluginsBgpCommunityListRuleBulkUpdateMultipartRequestBody defines body for PluginsBgpCommunityListRuleBulkUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListRuleBulkUpdateMultipartRequestBody = PluginsBgpCommunityListRuleBulkUpdateMultipartBody

// PluginsBgpCommunityListRulePartialUpdateJSONRequestBody defines body for PluginsBgpCommunityListRulePartialUpdate for application/json ContentType.
type PluginsBgpCommunityListRulePartialUpdateJSONRequestBody = PatchedWritableCommunityListRuleRequest

// PluginsBgpCommunityListRulePartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityListRulePartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListRulePartialUpdateMultipartRequestBody = PatchedWritableCommunityListRuleRequest

// PluginsBgpCommunityListRuleUpdateJSONRequestBody defines body for PluginsBgpCommunityListRuleUpdate for application/json ContentType.
type PluginsBgpCommunityListRuleUpdateJSONRequestBody = WritableCommunityListRuleRequest

// PluginsBgpCommunityListRuleUpdateMultipartRequestBody defines body for PluginsBgpCommunityListRuleUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListRuleUpdateMultipartRequestBody = WritableCommunityListRuleRequest

// PluginsBgpCommunityListBulkDestroyJSONRequestBody defines body for PluginsBgpCommunityListBulkDestroy for application/json ContentType.
type PluginsBgpCommunityListBulkDestroyJSONRequestBody = PluginsBgpCommunityListBulkDestroyJSONBody

// PluginsBgpCommunityListBulkDestroyMultipartRequestBody defines body for PluginsBgpCommunityListBulkDestroy for multipart/form-data ContentType.
type PluginsBgpCommunityListBulkDestroyMultipartRequestBody = PluginsBgpCommunityListBulkDestroyMultipartBody

// PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody defines body for PluginsBgpCommunityListBulkPartialUpdate for application/json ContentType.
type PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody = PluginsBgpCommunityListBulkPartialUpdateJSONBody

// PluginsBgpCommunityListBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityListBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListBulkPartialUpdateMultipartRequestBody = PluginsBgpCommunityListBulkPartialUpdateMultipartBody

// PluginsBgpCommunityListCreateJSONRequestBody defines body for PluginsBgpCommunityListCreate for application/json ContentType.
type PluginsBgpCommunityListCreateJSONRequestBody = CommunityListRequest

// PluginsBgpCommunityListCreateMultipartRequestBody defines body for PluginsBgpCommunityListCreate for multipart/form-data ContentType.
type PluginsBgpCommunityListCreateMultipartRequestBody = CommunityListRequest

// PluginsBgpCommunityListBulkUpdateJSONRequestBody defines body for PluginsBgpCommunityListBulkUpdate for application/json ContentType.
type PluginsBgpCommunityListBulkUpdateJSONRequestBody = PluginsBgpCommunityListBulkUpdateJSONBody

// PluginsBgpCommunityListBulkUpdateMultipartRequestBody defines body for PluginsBgpCommunityListBulkUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListBulkUpdateMultipartRequestBody = PluginsBgpCommunityListBulkUpdateMultipartBody

// PluginsBgpCommunityListPartialUpdateJSONRequestBody defines body for PluginsBgpCommunityListPartialUpdate for application/json ContentType.
type PluginsBgpCommunityListPartialUpdateJSONRequestBody = PatchedCommunityListRequest

// PluginsBgpCommunityListPartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityListPartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListPartialUpdateMultipartRequestBody = PatchedCommunityListRequest

// PluginsBgpCommunityListUpdateJSONRequestBody defines body for PluginsBgpCommunityListUpdate for application/json ContentType.
type PluginsBgpCommunityListUpdateJSONRequestBody = CommunityListRequest

// PluginsBgpCommunityListUpdateMultipartRequestBody defines body for PluginsBgpCommunityListUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityListUpdateMultipartRequestBody = CommunityListRequest

// PluginsBgpCommunityBulkDestroyJSONRequestBody defines body for PluginsBgpCommunityBulkDestroy for application/json ContentType.
type PluginsBgpCommunityBulkDestroyJSONRequestBody = PluginsBgpCommunityBulkDestroyJSONBody

// PluginsBgpCommunityBulkDestroyMultipartRequestBody defines body for PluginsBgpCommunityBulkDestroy for multipart/form-data ContentType.
type PluginsBgpCommunityBulkDestroyMultipartRequestBody = PluginsBgpCommunityBulkDestroyMultipartBody

// PluginsBgpCommunityBulkPartialUpdateJSONRequestBody defines body for PluginsBgpCommunityBulkPartialUpdate for application/json ContentType.
type PluginsBgpCommunityBulkPartialUpdateJSONRequestBody = PluginsBgpCommunityBulkPartialUpdateJSONBody

// PluginsBgpCommunityBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityBulkPartialUpdateMultipartRequestBody = PluginsBgpCommunityBulkPartialUpdateMultipartBody

// PluginsBgpCommunityCreateJSONRequestBody defines body for PluginsBgpCommunityCreate for application/json ContentType.
type PluginsBgpCommunityCreateJSONRequestBody = WritableCommunityRequest

// PluginsBgpCommunityCreateMultipartRequestBody defines body for PluginsBgpCommunityCreate for multipart/form-data ContentType.
type PluginsBgpCommunityCreateMultipartRequestBody = WritableCommunityRequest

// PluginsBgpCommunityBulkUpdateJSONRequestBody defines body for PluginsBgpCommunityBulkUpdate for application/json ContentType.
type PluginsBgpCommunityBulkUpdateJSONRequestBody = PluginsBgpCommunityBulkUpdateJSONBody

// PluginsBgpCommunityBulkUpdateMultipartRequestBody defines body for PluginsBgpCommunityBulkUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityBulkUpdateMultipartRequestBody = PluginsBgpCommunityBulkUpdateMultipartBody

// PluginsBgpCommunityPartialUpdateJSONRequestBody defines body for PluginsBgpCommunityPartialUpdate for application/json ContentType.
type PluginsBgpCommunityPartialUpdateJSONRequestBody = PatchedWritableCommunityRequest

// PluginsBgpCommunityPartialUpdateMultipartRequestBody defines body for PluginsBgpCommunityPartialUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityPartialUpdateMultipartRequestBody = PatchedWritableCommunityRequest

// PluginsBgpCommunityUpdateJSONRequestBody defines body for PluginsBgpCommunityUpdate for application/json ContentType.
type PluginsBgpCommunityUpdateJSONRequestBody = WritableCommunityRequest

// PluginsBgpCommunityUpdateMultipartRequestBody defines body for PluginsBgpCommunityUpdate for multipart/form-data ContentType.
type PluginsBgpCommunityUpdateMultipartRequestBody = WritableCommunityRequest

// PluginsBgpPeerGroupBulkDestroyJSONRequestBody defines body for PluginsBgpPeerGroupBulkDestroy for application/json ContentType.
type PluginsBgpPeerGroupBulkDestroyJSONRequestBody = PluginsBgpPeerGroupBulkDestroyJSONBody

// PluginsBgpPeerGroupBulkDestroyMultipartRequestBody defines body for PluginsBgpPeerGroupBulkDestroy for multipart/form-data ContentType.
type PluginsBgpPeerGroupBulkDestroyMultipartRequestBody = PluginsBgpPeerGroupBulkDestroyMultipartBody

// PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody defines body for PluginsBgpPeerGroupBulkPartialUpdate for application/json ContentType.
type PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody = PluginsBgpPeerGroupBulkPartialUpdateJSONBody

// PluginsBgpPeerGroupBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpPeerGroupBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpPeerGroupBulkPartialUpdateMultipartRequestBody = PluginsBgpPeerGroupBulkPartialUpdateMultipartBody

// PluginsBgpPeerGroupCreateJSONRequestBody defines body for PluginsBgpPeerGroupCreate for application/json ContentType.
type PluginsBgpPeerGroupCreateJSONRequestBody = BGPPeerGroupRequest

// PluginsBgpPeerGroupCreateMultipartRequestBody defines body for PluginsBgpPeerGroupCreate for multipart/form-data ContentType.
type PluginsBgpPeerGroupCreateMultipartRequestBody = BGPPeerGroupRequest

// PluginsBgpPeerGroupBulkUpdateJSONRequestBody defines body for PluginsBgpPeerGroupBulkUpdate for application/json ContentType.
type PluginsBgpPeerGroupBulkUpdateJSONRequestBody = PluginsBgpPeerGroupBulkUpdateJSONBody

// PluginsBgpPeerGroupBulkUpdateMultipartRequestBody defines body for PluginsBgpPeerGroupBulkUpdate for multipart/form-data ContentType.
type PluginsBgpPeerGroupBulkUpdateMultipartRequestBody = PluginsBgpPeerGroupBulkUpdateMultipartBody

// PluginsBgpPeerGroupPartialUpdateJSONRequestBody defines body for PluginsBgpPeerGroupPartialUpdate for application/json ContentType.
type PluginsBgpPeerGroupPartialUpdateJSONRequestBody = PatchedBGPPeerGroupRequest

// PluginsBgpPeerGroupPartialUpdateMultipartRequestBody defines body for PluginsBgpPeerGroupPartialUpdate for multipart/form-data ContentType.
type PluginsBgpPeerGroupPartialUpdateMultipartRequestBody = PatchedBGPPeerGroupRequest

// PluginsBgpPeerGroupUpdateJSONRequestBody defines body for PluginsBgpPeerGroupUpdate for application/json ContentType.
type PluginsBgpPeerGroupUpdateJSONRequestBody = BGPPeerGroupRequest

// PluginsBgpPeerGroupUpdateMultipartRequestBody defines body for PluginsBgpPeerGroupUpdate for multipart/form-data ContentType.
type PluginsBgpPeerGroupUpdateMultipartRequestBody = BGPPeerGroupRequest

// PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody defines body for PluginsBgpPrefixListRuleBulkDestroy for application/json ContentType.
type PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody = PluginsBgpPrefixListRuleBulkDestroyJSONBody

// PluginsBgpPrefixListRuleBulkDestroyMultipartRequestBody defines body for PluginsBgpPrefixListRuleBulkDestroy for multipart/form-data ContentType.
type PluginsBgpPrefixListRuleBulkDestroyMultipartRequestBody = PluginsBgpPrefixListRuleBulkDestroyMultipartBody

// PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody defines body for PluginsBgpPrefixListRuleBulkPartialUpdate for application/json ContentType.
type PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody = PluginsBgpPrefixListRuleBulkPartialUpdateJSONBody

// PluginsBgpPrefixListRuleBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpPrefixListRuleBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListRuleBulkPartialUpdateMultipartRequestBody = PluginsBgpPrefixListRuleBulkPartialUpdateMultipartBody

// PluginsBgpPrefixListRuleCreateJSONRequestBody defines body for PluginsBgpPrefixListRuleCreate for application/json ContentType.
type PluginsBgpPrefixListRuleCreateJSONRequestBody = WritablePrefixListRuleRequest

// PluginsBgpPrefixListRuleCreateMultipartRequestBody defines body for PluginsBgpPrefixListRuleCreate for multipart/form-data ContentType.
type PluginsBgpPrefixListRuleCreateMultipartRequestBody = WritablePrefixListRuleRequest

// PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody defines body for PluginsBgpPrefixListRuleBulkUpdate for application/json ContentType.
type PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody = PluginsBgpPrefixListRuleBulkUpdateJSONBody

// PluginsBgpPrefixListRuleBulkUpdateMultipartRequestBody defines body for PluginsBgpPrefixListRuleBulkUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListRuleBulkUpdateMultipartRequestBody = PluginsBgpPrefixListRuleBulkUpdateMultipartBody

// PluginsBgpPrefixListRulePartialUpdateJSONRequestBody defines body for PluginsBgpPrefixListRulePartialUpdate for application/json ContentType.
type PluginsBgpPrefixListRulePartialUpdateJSONRequestBody = PatchedWritablePrefixListRuleRequest

// PluginsBgpPrefixListRulePartialUpdateMultipartRequestBody defines body for PluginsBgpPrefixListRulePartialUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListRulePartialUpdateMultipartRequestBody = PatchedWritablePrefixListRuleRequest

// PluginsBgpPrefixListRuleUpdateJSONRequestBody defines body for PluginsBgpPrefixListRuleUpdate for application/json ContentType.
type PluginsBgpPrefixListRuleUpdateJSONRequestBody = WritablePrefixListRuleRequest

// PluginsBgpPrefixListRuleUpdateMultipartRequestBody defines body for PluginsBgpPrefixListRuleUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListRuleUpdateMultipartRequestBody = WritablePrefixListRuleRequest

// PluginsBgpPrefixListBulkDestroyJSONRequestBody defines body for PluginsBgpPrefixListBulkDestroy for application/json ContentType.
type PluginsBgpPrefixListBulkDestroyJSONRequestBody = PluginsBgpPrefixListBulkDestroyJSONBody

// PluginsBgpPrefixListBulkDestroyMultipartRequestBody defines body for PluginsBgpPrefixListBulkDestroy for multipart/form-data ContentType.
type PluginsBgpPrefixListBulkDestroyMultipartRequestBody = PluginsBgpPrefixListBulkDestroyMultipartBody

// PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody defines body for PluginsBgpPrefixListBulkPartialUpdate for application/json ContentType.
type PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody = PluginsBgpPrefixListBulkPartialUpdateJSONBody

// PluginsBgpPrefixListBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpPrefixListBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListBulkPartialUpdateMultipartRequestBody = PluginsBgpPrefixListBulkPartialUpdateMultipartBody

// PluginsBgpPrefixListCreateJSONRequestBody defines body for PluginsBgpPrefixListCreate for application/json ContentType.
type PluginsBgpPrefixListCreateJSONRequestBody = PrefixListRequest

// PluginsBgpPrefixListCreateMultipartRequestBody defines body for PluginsBgpPrefixListCreate for multipart/form-data ContentType.
type PluginsBgpPrefixListCreateMultipartRequestBody = PrefixListRequest

// PluginsBgpPrefixListBulkUpdateJSONRequestBody defines body for PluginsBgpPrefixListBulkUpdate for application/json ContentType.
type PluginsBgpPrefixListBulkUpdateJSONRequestBody = PluginsBgpPrefixListBulkUpdateJSONBody

// PluginsBgpPrefixListBulkUpdateMultipartRequestBody defines body for PluginsBgpPrefixListBulkUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListBulkUpdateMultipartRequestBody = PluginsBgpPrefixListBulkUpdateMultipartBody

// PluginsBgpPrefixListPartialUpdateJSONRequestBody defines body for PluginsBgpPrefixListPartialUpdate for application/json ContentType.
type PluginsBgpPrefixListPartialUpdateJSONRequestBody = PatchedPrefixListRequest

// PluginsBgpPrefixListPartialUpdateMultipartRequestBody defines body for PluginsBgpPrefixListPartialUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListPartialUpdateMultipartRequestBody = PatchedPrefixListRequest

// PluginsBgpPrefixListUpdateJSONRequestBody defines body for PluginsBgpPrefixListUpdate for application/json ContentType.
type PluginsBgpPrefixListUpdateJSONRequestBody = PrefixListRequest

// PluginsBgpPrefixListUpdateMultipartRequestBody defines body for PluginsBgpPrefixListUpdate for multipart/form-data ContentType.
type PluginsBgpPrefixListUpdateMultipartRequestBody = PrefixListRequest

// PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkDestroy for application/json ContentType.
type PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody = PluginsBgpRoutingPolicyRuleBulkDestroyJSONBody

// PluginsBgpRoutingPolicyRuleBulkDestroyMultipartRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkDestroy for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRuleBulkDestroyMultipartRequestBody = PluginsBgpRoutingPolicyRuleBulkDestroyMultipartBody

// PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkPartialUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody = PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONBody

// PluginsBgpRoutingPolicyRuleBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRuleBulkPartialUpdateMultipartRequestBody = PluginsBgpRoutingPolicyRuleBulkPartialUpdateMultipartBody

// PluginsBgpRoutingPolicyRuleCreateJSONRequestBody defines body for PluginsBgpRoutingPolicyRuleCreate for application/json ContentType.
type PluginsBgpRoutingPolicyRuleCreateJSONRequestBody = WritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleCreateMultipartRequestBody defines body for PluginsBgpRoutingPolicyRuleCreate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRuleCreateMultipartRequestBody = WritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody = PluginsBgpRoutingPolicyRuleBulkUpdateJSONBody

// PluginsBgpRoutingPolicyRuleBulkUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyRuleBulkUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRuleBulkUpdateMultipartRequestBody = PluginsBgpRoutingPolicyRuleBulkUpdateMultipartBody

// PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyRulePartialUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody = PatchedWritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRulePartialUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyRulePartialUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRulePartialUpdateMultipartRequestBody = PatchedWritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyRuleUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody = WritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyRuleUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyRuleUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyRuleUpdateMultipartRequestBody = WritableRoutingPolicyRuleRequest

// PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody defines body for PluginsBgpRoutingPolicyBulkDestroy for application/json ContentType.
type PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody = PluginsBgpRoutingPolicyBulkDestroyJSONBody

// PluginsBgpRoutingPolicyBulkDestroyMultipartRequestBody defines body for PluginsBgpRoutingPolicyBulkDestroy for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyBulkDestroyMultipartRequestBody = PluginsBgpRoutingPolicyBulkDestroyMultipartBody

// PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyBulkPartialUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody = PluginsBgpRoutingPolicyBulkPartialUpdateJSONBody

// PluginsBgpRoutingPolicyBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyBulkPartialUpdateMultipartRequestBody = PluginsBgpRoutingPolicyBulkPartialUpdateMultipartBody

// PluginsBgpRoutingPolicyCreateJSONRequestBody defines body for PluginsBgpRoutingPolicyCreate for application/json ContentType.
type PluginsBgpRoutingPolicyCreateJSONRequestBody = RoutingPolicyRequest

// PluginsBgpRoutingPolicyCreateMultipartRequestBody defines body for PluginsBgpRoutingPolicyCreate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyCreateMultipartRequestBody = RoutingPolicyRequest

// PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyBulkUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody = PluginsBgpRoutingPolicyBulkUpdateJSONBody

// PluginsBgpRoutingPolicyBulkUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyBulkUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyBulkUpdateMultipartRequestBody = PluginsBgpRoutingPolicyBulkUpdateMultipartBody

// PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyPartialUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody = PatchedRoutingPolicyRequest

// PluginsBgpRoutingPolicyPartialUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyPartialUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyPartialUpdateMultipartRequestBody = PatchedRoutingPolicyRequest

// PluginsBgpRoutingPolicyUpdateJSONRequestBody defines body for PluginsBgpRoutingPolicyUpdate for application/json ContentType.
type PluginsBgpRoutingPolicyUpdateJSONRequestBody = RoutingPolicyRequest

// PluginsBgpRoutingPolicyUpdateMultipartRequestBody defines body for PluginsBgpRoutingPolicyUpdate for multipart/form-data ContentType.
type PluginsBgpRoutingPolicyUpdateMultipartRequestBody = RoutingPolicyRequest

// PluginsBgpSessionBulkDestroyJSONRequestBody defines body for PluginsBgpSessionBulkDestroy for application/json ContentType.
type PluginsBgpSessionBulkDestroyJSONRequestBody = PluginsBgpSessionBulkDestroyJSONBody

// PluginsBgpSessionBulkDestroyMultipartRequestBody defines body for PluginsBgpSessionBulkDestroy for multipart/form-data ContentType.
type PluginsBgpSessionBulkDestroyMultipartRequestBody = PluginsBgpSessionBulkDestroyMultipartBody

// PluginsBgpSessionBulkPartialUpdateJSONRequestBody defines body for PluginsBgpSessionBulkPartialUpdate for application/json ContentType.
type PluginsBgpSessionBulkPartialUpdateJSONRequestBody = PluginsBgpSessionBulkPartialUpdateJSONBody

// PluginsBgpSessionBulkPartialUpdateMultipartRequestBody defines body for PluginsBgpSessionBulkPartialUpdate for multipart/form-data ContentType.
type PluginsBgpSessionBulkPartialUpdateMultipartRequestBody = PluginsBgpSessionBulkPartialUpdateMultipartBody

// PluginsBgpSessionCreateJSONRequestBody defines body for PluginsBgpSessionCreate for application/json ContentType.
type PluginsBgpSessionCreateJSONRequestBody = WritableBGPSessionRequest

// PluginsBgpSessionCreateMultipartRequestBody defines body for PluginsBgpSessionCreate for multipart/form-data ContentType.
type PluginsBgpSessionCreateMultipartRequestBody = WritableBGPSessionRequest

// PluginsBgpSessionBulkUpdateJSONRequestBody defines body for PluginsBgpSessionBulkUpdate for application/json ContentType.
type PluginsBgpSessionBulkUpdateJSONRequestBody = PluginsBgpSessionBulkUpdateJSONBody

// PluginsBgpSessionBulkUpdateMultipartRequestBody defines body for PluginsBgpSessionBulkUpdate for multipart/form-data ContentType.
type PluginsBgpSessionBulkUpdateMultipartRequestBody = PluginsBgpSessionBulkUpdateMultipartBody

// PluginsBgpSessionPartialUpdateJSONRequestBody defines body for PluginsBgpSessionPartialUpdate for application/json ContentType.
type PluginsBgpSessionPartialUpdateJSONRequestBody = PatchedWritableBGPSessionRequest

// PluginsBgpSessionPartialUpdateMultipartRequestBody defines body for PluginsBgpSessionPartialUpdate for multipart/form-data ContentType.
type PluginsBgpSessionPartialUpdateMultipartRequestBody = PatchedWritableBGPSessionRequest

// PluginsBgpSessionUpdateJSONRequestBody defines body for PluginsBgpSessionUpdate for application/json ContentType.
type PluginsBgpSessionUpdateJSONRequestBody = WritableBGPSessionRequest

// PluginsBgpSessionUpdateMultipartRequestBody defines body for PluginsBgpSessionUpdate for multipart/form-data ContentType.
type PluginsBgpSessionUpdateMultipartRequestBody = WritableBGPSessionRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PluginsBgpBgppeergroupBulkDestroyWithBody request with any body
	PluginsBgpBgppeergroupBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupBulkDestroy(ctx context.Context, body PluginsBgpBgppeergroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupList request
	PluginsBgpBgppeergroupList(ctx context.Context, params *PluginsBgpBgppeergroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupBulkPartialUpdateWithBody request with any body
	PluginsBgpBgppeergroupBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupBulkPartialUpdate(ctx context.Context, body PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupCreateWithBody request with any body
	PluginsBgpBgppeergroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupCreate(ctx context.Context, body PluginsBgpBgppeergroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupBulkUpdateWithBody request with any body
	PluginsBgpBgppeergroupBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupBulkUpdate(ctx context.Context, body PluginsBgpBgppeergroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupDestroy request
	PluginsBgpBgppeergroupDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupRetrieve request
	PluginsBgpBgppeergroupRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupPartialUpdateWithBody request with any body
	PluginsBgpBgppeergroupPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupPartialUpdate(ctx context.Context, id int, body PluginsBgpBgppeergroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgppeergroupUpdateWithBody request with any body
	PluginsBgpBgppeergroupUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgppeergroupUpdate(ctx context.Context, id int, body PluginsBgpBgppeergroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionBulkDestroyWithBody request with any body
	PluginsBgpBgpsessionBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionBulkDestroy(ctx context.Context, body PluginsBgpBgpsessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionList request
	PluginsBgpBgpsessionList(ctx context.Context, params *PluginsBgpBgpsessionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionBulkPartialUpdateWithBody request with any body
	PluginsBgpBgpsessionBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionBulkPartialUpdate(ctx context.Context, body PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionCreateWithBody request with any body
	PluginsBgpBgpsessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionCreate(ctx context.Context, body PluginsBgpBgpsessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionBulkUpdateWithBody request with any body
	PluginsBgpBgpsessionBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionBulkUpdate(ctx context.Context, body PluginsBgpBgpsessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionDestroy request
	PluginsBgpBgpsessionDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionRetrieve request
	PluginsBgpBgpsessionRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionPartialUpdateWithBody request with any body
	PluginsBgpBgpsessionPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionPartialUpdate(ctx context.Context, id int, body PluginsBgpBgpsessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpBgpsessionUpdateWithBody request with any body
	PluginsBgpBgpsessionUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpBgpsessionUpdate(ctx context.Context, id int, body PluginsBgpBgpsessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleBulkDestroyWithBody request with any body
	PluginsBgpCommunityListRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRuleBulkDestroy(ctx context.Context, body PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleList request
	PluginsBgpCommunityListRuleList(ctx context.Context, params *PluginsBgpCommunityListRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleBulkPartialUpdateWithBody request with any body
	PluginsBgpCommunityListRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleCreateWithBody request with any body
	PluginsBgpCommunityListRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRuleCreate(ctx context.Context, body PluginsBgpCommunityListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleBulkUpdateWithBody request with any body
	PluginsBgpCommunityListRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRuleBulkUpdate(ctx context.Context, body PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleDestroy request
	PluginsBgpCommunityListRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleRetrieve request
	PluginsBgpCommunityListRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRulePartialUpdateWithBody request with any body
	PluginsBgpCommunityListRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRulePartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRuleUpdateWithBody request with any body
	PluginsBgpCommunityListRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListRuleUpdate(ctx context.Context, id int, body PluginsBgpCommunityListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListBulkDestroyWithBody request with any body
	PluginsBgpCommunityListBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListBulkDestroy(ctx context.Context, body PluginsBgpCommunityListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListList request
	PluginsBgpCommunityListList(ctx context.Context, params *PluginsBgpCommunityListListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListBulkPartialUpdateWithBody request with any body
	PluginsBgpCommunityListBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListCreateWithBody request with any body
	PluginsBgpCommunityListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListCreate(ctx context.Context, body PluginsBgpCommunityListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListBulkUpdateWithBody request with any body
	PluginsBgpCommunityListBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListBulkUpdate(ctx context.Context, body PluginsBgpCommunityListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListDestroy request
	PluginsBgpCommunityListDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListRetrieve request
	PluginsBgpCommunityListRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListPartialUpdateWithBody request with any body
	PluginsBgpCommunityListPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListPartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityListUpdateWithBody request with any body
	PluginsBgpCommunityListUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityListUpdate(ctx context.Context, id int, body PluginsBgpCommunityListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityBulkDestroyWithBody request with any body
	PluginsBgpCommunityBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityBulkDestroy(ctx context.Context, body PluginsBgpCommunityBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityList request
	PluginsBgpCommunityList(ctx context.Context, params *PluginsBgpCommunityListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityBulkPartialUpdateWithBody request with any body
	PluginsBgpCommunityBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityCreateWithBody request with any body
	PluginsBgpCommunityCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityCreate(ctx context.Context, body PluginsBgpCommunityCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityBulkUpdateWithBody request with any body
	PluginsBgpCommunityBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityBulkUpdate(ctx context.Context, body PluginsBgpCommunityBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityDestroy request
	PluginsBgpCommunityDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityRetrieve request
	PluginsBgpCommunityRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityPartialUpdateWithBody request with any body
	PluginsBgpCommunityPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityPartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpCommunityUpdateWithBody request with any body
	PluginsBgpCommunityUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpCommunityUpdate(ctx context.Context, id int, body PluginsBgpCommunityUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupBulkDestroyWithBody request with any body
	PluginsBgpPeerGroupBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupBulkDestroy(ctx context.Context, body PluginsBgpPeerGroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupList request
	PluginsBgpPeerGroupList(ctx context.Context, params *PluginsBgpPeerGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupBulkPartialUpdateWithBody request with any body
	PluginsBgpPeerGroupBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupBulkPartialUpdate(ctx context.Context, body PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupCreateWithBody request with any body
	PluginsBgpPeerGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupCreate(ctx context.Context, body PluginsBgpPeerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupBulkUpdateWithBody request with any body
	PluginsBgpPeerGroupBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupBulkUpdate(ctx context.Context, body PluginsBgpPeerGroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupDestroy request
	PluginsBgpPeerGroupDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupRetrieve request
	PluginsBgpPeerGroupRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupPartialUpdateWithBody request with any body
	PluginsBgpPeerGroupPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupPartialUpdate(ctx context.Context, id int, body PluginsBgpPeerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPeerGroupUpdateWithBody request with any body
	PluginsBgpPeerGroupUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPeerGroupUpdate(ctx context.Context, id int, body PluginsBgpPeerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleBulkDestroyWithBody request with any body
	PluginsBgpPrefixListRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRuleBulkDestroy(ctx context.Context, body PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleList request
	PluginsBgpPrefixListRuleList(ctx context.Context, params *PluginsBgpPrefixListRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleBulkPartialUpdateWithBody request with any body
	PluginsBgpPrefixListRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleCreateWithBody request with any body
	PluginsBgpPrefixListRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRuleCreate(ctx context.Context, body PluginsBgpPrefixListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleBulkUpdateWithBody request with any body
	PluginsBgpPrefixListRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRuleBulkUpdate(ctx context.Context, body PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleDestroy request
	PluginsBgpPrefixListRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleRetrieve request
	PluginsBgpPrefixListRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRulePartialUpdateWithBody request with any body
	PluginsBgpPrefixListRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRulePartialUpdate(ctx context.Context, id int, body PluginsBgpPrefixListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRuleUpdateWithBody request with any body
	PluginsBgpPrefixListRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListRuleUpdate(ctx context.Context, id int, body PluginsBgpPrefixListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListBulkDestroyWithBody request with any body
	PluginsBgpPrefixListBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListBulkDestroy(ctx context.Context, body PluginsBgpPrefixListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListList request
	PluginsBgpPrefixListList(ctx context.Context, params *PluginsBgpPrefixListListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListBulkPartialUpdateWithBody request with any body
	PluginsBgpPrefixListBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListBulkPartialUpdate(ctx context.Context, body PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListCreateWithBody request with any body
	PluginsBgpPrefixListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListCreate(ctx context.Context, body PluginsBgpPrefixListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListBulkUpdateWithBody request with any body
	PluginsBgpPrefixListBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListBulkUpdate(ctx context.Context, body PluginsBgpPrefixListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListDestroy request
	PluginsBgpPrefixListDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListRetrieve request
	PluginsBgpPrefixListRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListPartialUpdateWithBody request with any body
	PluginsBgpPrefixListPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListPartialUpdate(ctx context.Context, id int, body PluginsBgpPrefixListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpPrefixListUpdateWithBody request with any body
	PluginsBgpPrefixListUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpPrefixListUpdate(ctx context.Context, id int, body PluginsBgpPrefixListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleBulkDestroyWithBody request with any body
	PluginsBgpRoutingPolicyRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRuleBulkDestroy(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleList request
	PluginsBgpRoutingPolicyRuleList(ctx context.Context, params *PluginsBgpRoutingPolicyRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBody request with any body
	PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleCreateWithBody request with any body
	PluginsBgpRoutingPolicyRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRuleCreate(ctx context.Context, body PluginsBgpRoutingPolicyRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleBulkUpdateWithBody request with any body
	PluginsBgpRoutingPolicyRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRuleBulkUpdate(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleDestroy request
	PluginsBgpRoutingPolicyRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleRetrieve request
	PluginsBgpRoutingPolicyRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRulePartialUpdateWithBody request with any body
	PluginsBgpRoutingPolicyRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRulePartialUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRuleUpdateWithBody request with any body
	PluginsBgpRoutingPolicyRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyRuleUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyBulkDestroyWithBody request with any body
	PluginsBgpRoutingPolicyBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyBulkDestroy(ctx context.Context, body PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyList request
	PluginsBgpRoutingPolicyList(ctx context.Context, params *PluginsBgpRoutingPolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyBulkPartialUpdateWithBody request with any body
	PluginsBgpRoutingPolicyBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyBulkPartialUpdate(ctx context.Context, body PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyCreateWithBody request with any body
	PluginsBgpRoutingPolicyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyCreate(ctx context.Context, body PluginsBgpRoutingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyBulkUpdateWithBody request with any body
	PluginsBgpRoutingPolicyBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyBulkUpdate(ctx context.Context, body PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyDestroy request
	PluginsBgpRoutingPolicyDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyRetrieve request
	PluginsBgpRoutingPolicyRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyPartialUpdateWithBody request with any body
	PluginsBgpRoutingPolicyPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyPartialUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpRoutingPolicyUpdateWithBody request with any body
	PluginsBgpRoutingPolicyUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpRoutingPolicyUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionBulkDestroyWithBody request with any body
	PluginsBgpSessionBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionBulkDestroy(ctx context.Context, body PluginsBgpSessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionList request
	PluginsBgpSessionList(ctx context.Context, params *PluginsBgpSessionListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionBulkPartialUpdateWithBody request with any body
	PluginsBgpSessionBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionBulkPartialUpdate(ctx context.Context, body PluginsBgpSessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionCreateWithBody request with any body
	PluginsBgpSessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionCreate(ctx context.Context, body PluginsBgpSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionBulkUpdateWithBody request with any body
	PluginsBgpSessionBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionBulkUpdate(ctx context.Context, body PluginsBgpSessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionDestroy request
	PluginsBgpSessionDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionRetrieve request
	PluginsBgpSessionRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionPartialUpdateWithBody request with any body
	PluginsBgpSessionPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionPartialUpdate(ctx context.Context, id int, body PluginsBgpSessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PluginsBgpSessionUpdateWithBody request with any body
	PluginsBgpSessionUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PluginsBgpSessionUpdate(ctx context.Context, id int, body PluginsBgpSessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PluginsBgpBgppeergroupBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupBulkDestroy(ctx context.Context, body PluginsBgpBgppeergroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupList(ctx context.Context, params *PluginsBgpBgppeergroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupBulkPartialUpdate(ctx context.Context, body PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupCreate(ctx context.Context, body PluginsBgpBgppeergroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupBulkUpdate(ctx context.Context, body PluginsBgpBgppeergroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupPartialUpdate(ctx context.Context, id int, body PluginsBgpBgppeergroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgppeergroupUpdate(ctx context.Context, id int, body PluginsBgpBgppeergroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgppeergroupUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkDestroy(ctx context.Context, body PluginsBgpBgpsessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionList(ctx context.Context, params *PluginsBgpBgpsessionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkPartialUpdate(ctx context.Context, body PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionCreate(ctx context.Context, body PluginsBgpBgpsessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionBulkUpdate(ctx context.Context, body PluginsBgpBgpsessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionPartialUpdate(ctx context.Context, id int, body PluginsBgpBgpsessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpBgpsessionUpdate(ctx context.Context, id int, body PluginsBgpBgpsessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpBgpsessionUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkDestroy(ctx context.Context, body PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleList(ctx context.Context, params *PluginsBgpCommunityListRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleCreate(ctx context.Context, body PluginsBgpCommunityListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleBulkUpdate(ctx context.Context, body PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRulePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRulePartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRulePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRuleUpdate(ctx context.Context, id int, body PluginsBgpCommunityListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRuleUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkDestroy(ctx context.Context, body PluginsBgpCommunityListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListList(ctx context.Context, params *PluginsBgpCommunityListListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListCreate(ctx context.Context, body PluginsBgpCommunityListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListBulkUpdate(ctx context.Context, body PluginsBgpCommunityListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListPartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityListUpdate(ctx context.Context, id int, body PluginsBgpCommunityListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkDestroy(ctx context.Context, body PluginsBgpCommunityBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityList(ctx context.Context, params *PluginsBgpCommunityListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkPartialUpdate(ctx context.Context, body PluginsBgpCommunityBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityCreate(ctx context.Context, body PluginsBgpCommunityCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityBulkUpdate(ctx context.Context, body PluginsBgpCommunityBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityPartialUpdate(ctx context.Context, id int, body PluginsBgpCommunityPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpCommunityUpdate(ctx context.Context, id int, body PluginsBgpCommunityUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpCommunityUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkDestroy(ctx context.Context, body PluginsBgpPeerGroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupList(ctx context.Context, params *PluginsBgpPeerGroupListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkPartialUpdate(ctx context.Context, body PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupCreate(ctx context.Context, body PluginsBgpPeerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupBulkUpdate(ctx context.Context, body PluginsBgpPeerGroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupPartialUpdate(ctx context.Context, id int, body PluginsBgpPeerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPeerGroupUpdate(ctx context.Context, id int, body PluginsBgpPeerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPeerGroupUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkDestroy(ctx context.Context, body PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleList(ctx context.Context, params *PluginsBgpPrefixListRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleCreate(ctx context.Context, body PluginsBgpPrefixListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleBulkUpdate(ctx context.Context, body PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRulePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRulePartialUpdate(ctx context.Context, id int, body PluginsBgpPrefixListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRulePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRuleUpdate(ctx context.Context, id int, body PluginsBgpPrefixListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRuleUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkDestroy(ctx context.Context, body PluginsBgpPrefixListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListList(ctx context.Context, params *PluginsBgpPrefixListListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkPartialUpdate(ctx context.Context, body PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListCreate(ctx context.Context, body PluginsBgpPrefixListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListBulkUpdate(ctx context.Context, body PluginsBgpPrefixListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListPartialUpdate(ctx context.Context, id int, body PluginsBgpPrefixListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpPrefixListUpdate(ctx context.Context, id int, body PluginsBgpPrefixListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpPrefixListUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkDestroy(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleList(ctx context.Context, params *PluginsBgpRoutingPolicyRuleListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkPartialUpdate(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleCreate(ctx context.Context, body PluginsBgpRoutingPolicyRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleBulkUpdate(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRulePartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRulePartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRulePartialUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRulePartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRuleUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRuleUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkDestroy(ctx context.Context, body PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyList(ctx context.Context, params *PluginsBgpRoutingPolicyListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkPartialUpdate(ctx context.Context, body PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyCreate(ctx context.Context, body PluginsBgpRoutingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyBulkUpdate(ctx context.Context, body PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyPartialUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpRoutingPolicyUpdate(ctx context.Context, id int, body PluginsBgpRoutingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpRoutingPolicyUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkDestroyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkDestroyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkDestroy(ctx context.Context, body PluginsBgpSessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkDestroyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionList(ctx context.Context, params *PluginsBgpSessionListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionListRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkPartialUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkPartialUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkPartialUpdate(ctx context.Context, body PluginsBgpSessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkPartialUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionCreate(ctx context.Context, body PluginsBgpSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionBulkUpdate(ctx context.Context, body PluginsBgpSessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionBulkUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionDestroy(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionDestroyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionRetrieve(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionRetrieveRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionPartialUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionPartialUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionPartialUpdate(ctx context.Context, id int, body PluginsBgpSessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionPartialUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionUpdateWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionUpdateRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PluginsBgpSessionUpdate(ctx context.Context, id int, body PluginsBgpSessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPluginsBgpSessionUpdateRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPluginsBgpBgppeergroupBulkDestroyRequest calls the generic PluginsBgpBgppeergroupBulkDestroy builder with application/json body
func NewPluginsBgpBgppeergroupBulkDestroyRequest(server string, body PluginsBgpBgppeergroupBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupBulkDestroyRequestWithBody generates requests for PluginsBgpBgppeergroupBulkDestroy with any type of body
func NewPluginsBgpBgppeergroupBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgppeergroupListRequest generates requests for PluginsBgpBgppeergroupList
func NewPluginsBgpBgppeergroupListRequest(server string, params *PluginsBgpBgppeergroupListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgppeergroupBulkPartialUpdateRequest calls the generic PluginsBgpBgppeergroupBulkPartialUpdate builder with application/json body
func NewPluginsBgpBgppeergroupBulkPartialUpdateRequest(server string, body PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupBulkPartialUpdateRequestWithBody generates requests for PluginsBgpBgppeergroupBulkPartialUpdate with any type of body
func NewPluginsBgpBgppeergroupBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgppeergroupCreateRequest calls the generic PluginsBgpBgppeergroupCreate builder with application/json body
func NewPluginsBgpBgppeergroupCreateRequest(server string, body PluginsBgpBgppeergroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupCreateRequestWithBody generates requests for PluginsBgpBgppeergroupCreate with any type of body
func NewPluginsBgpBgppeergroupCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgppeergroupBulkUpdateRequest calls the generic PluginsBgpBgppeergroupBulkUpdate builder with application/json body
func NewPluginsBgpBgppeergroupBulkUpdateRequest(server string, body PluginsBgpBgppeergroupBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupBulkUpdateRequestWithBody generates requests for PluginsBgpBgppeergroupBulkUpdate with any type of body
func NewPluginsBgpBgppeergroupBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgppeergroupDestroyRequest generates requests for PluginsBgpBgppeergroupDestroy
func NewPluginsBgpBgppeergroupDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgppeergroupRetrieveRequest generates requests for PluginsBgpBgppeergroupRetrieve
func NewPluginsBgpBgppeergroupRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgppeergroupPartialUpdateRequest calls the generic PluginsBgpBgppeergroupPartialUpdate builder with application/json body
func NewPluginsBgpBgppeergroupPartialUpdateRequest(server string, id int, body PluginsBgpBgppeergroupPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupPartialUpdateRequestWithBody generates requests for PluginsBgpBgppeergroupPartialUpdate with any type of body
func NewPluginsBgpBgppeergroupPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgppeergroupUpdateRequest calls the generic PluginsBgpBgppeergroupUpdate builder with application/json body
func NewPluginsBgpBgppeergroupUpdateRequest(server string, id int, body PluginsBgpBgppeergroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgppeergroupUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpBgppeergroupUpdateRequestWithBody generates requests for PluginsBgpBgppeergroupUpdate with any type of body
func NewPluginsBgpBgppeergroupUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgppeergroup/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionBulkDestroyRequest calls the generic PluginsBgpBgpsessionBulkDestroy builder with application/json body
func NewPluginsBgpBgpsessionBulkDestroyRequest(server string, body PluginsBgpBgpsessionBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionBulkDestroyRequestWithBody generates requests for PluginsBgpBgpsessionBulkDestroy with any type of body
func NewPluginsBgpBgpsessionBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionListRequest generates requests for PluginsBgpBgpsessionList
func NewPluginsBgpBgpsessionListRequest(server string, params *PluginsBgpBgpsessionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ByLocalAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "by_local_address", runtime.ParamLocationQuery, *params.ByLocalAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByRemoteAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "by_remote_address", runtime.ParamLocationQuery, *params.ByRemoteAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device__n", runtime.ParamLocationQuery, *params.DeviceN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, *params.DeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id__n", runtime.ParamLocationQuery, *params.DeviceIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportPolicies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_policies", runtime.ParamLocationQuery, *params.ExportPolicies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportPoliciesN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_policies__n", runtime.ParamLocationQuery, *params.ExportPoliciesN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportPolicies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_policies", runtime.ParamLocationQuery, *params.ImportPolicies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportPoliciesN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_policies__n", runtime.ParamLocationQuery, *params.ImportPoliciesN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address", runtime.ParamLocationQuery, *params.LocalAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address__n", runtime.ParamLocationQuery, *params.LocalAddressN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address_id", runtime.ParamLocationQuery, *params.LocalAddressId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address_id__n", runtime.ParamLocationQuery, *params.LocalAddressIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as", runtime.ParamLocationQuery, *params.LocalAs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as__n", runtime.ParamLocationQuery, *params.LocalAsN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as_id", runtime.ParamLocationQuery, *params.LocalAsId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as_id__n", runtime.ParamLocationQuery, *params.LocalAsIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeerGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_group", runtime.ParamLocationQuery, *params.PeerGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeerGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_group__n", runtime.ParamLocationQuery, *params.PeerGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address", runtime.ParamLocationQuery, *params.RemoteAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address__n", runtime.ParamLocationQuery, *params.RemoteAddressN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address_id", runtime.ParamLocationQuery, *params.RemoteAddressId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address_id__n", runtime.ParamLocationQuery, *params.RemoteAddressIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as", runtime.ParamLocationQuery, *params.RemoteAs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as__n", runtime.ParamLocationQuery, *params.RemoteAsN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as_id", runtime.ParamLocationQuery, *params.RemoteAsId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as_id__n", runtime.ParamLocationQuery, *params.RemoteAsIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Site != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, *params.Site); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site__n", runtime.ParamLocationQuery, *params.SiteN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id__n", runtime.ParamLocationQuery, *params.SiteIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgpsessionBulkPartialUpdateRequest calls the generic PluginsBgpBgpsessionBulkPartialUpdate builder with application/json body
func NewPluginsBgpBgpsessionBulkPartialUpdateRequest(server string, body PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionBulkPartialUpdateRequestWithBody generates requests for PluginsBgpBgpsessionBulkPartialUpdate with any type of body
func NewPluginsBgpBgpsessionBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionCreateRequest calls the generic PluginsBgpBgpsessionCreate builder with application/json body
func NewPluginsBgpBgpsessionCreateRequest(server string, body PluginsBgpBgpsessionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionCreateRequestWithBody generates requests for PluginsBgpBgpsessionCreate with any type of body
func NewPluginsBgpBgpsessionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionBulkUpdateRequest calls the generic PluginsBgpBgpsessionBulkUpdate builder with application/json body
func NewPluginsBgpBgpsessionBulkUpdateRequest(server string, body PluginsBgpBgpsessionBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionBulkUpdateRequestWithBody generates requests for PluginsBgpBgpsessionBulkUpdate with any type of body
func NewPluginsBgpBgpsessionBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionDestroyRequest generates requests for PluginsBgpBgpsessionDestroy
func NewPluginsBgpBgpsessionDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgpsessionRetrieveRequest generates requests for PluginsBgpBgpsessionRetrieve
func NewPluginsBgpBgpsessionRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpBgpsessionPartialUpdateRequest calls the generic PluginsBgpBgpsessionPartialUpdate builder with application/json body
func NewPluginsBgpBgpsessionPartialUpdateRequest(server string, id int, body PluginsBgpBgpsessionPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionPartialUpdateRequestWithBody generates requests for PluginsBgpBgpsessionPartialUpdate with any type of body
func NewPluginsBgpBgpsessionPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpBgpsessionUpdateRequest calls the generic PluginsBgpBgpsessionUpdate builder with application/json body
func NewPluginsBgpBgpsessionUpdateRequest(server string, id int, body PluginsBgpBgpsessionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpBgpsessionUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpBgpsessionUpdateRequestWithBody generates requests for PluginsBgpBgpsessionUpdate with any type of body
func NewPluginsBgpBgpsessionUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/bgpsession/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleBulkDestroyRequest calls the generic PluginsBgpCommunityListRuleBulkDestroy builder with application/json body
func NewPluginsBgpCommunityListRuleBulkDestroyRequest(server string, body PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRuleBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRuleBulkDestroyRequestWithBody generates requests for PluginsBgpCommunityListRuleBulkDestroy with any type of body
func NewPluginsBgpCommunityListRuleBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleListRequest generates requests for PluginsBgpCommunityListRuleList
func NewPluginsBgpCommunityListRuleListRequest(server string, params *PluginsBgpCommunityListRuleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action__n", runtime.ParamLocationQuery, *params.ActionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommunityList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community_list", runtime.ParamLocationQuery, *params.CommunityList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommunityListN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community_list__n", runtime.ParamLocationQuery, *params.CommunityListN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommunityListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community_list_id", runtime.ParamLocationQuery, *params.CommunityListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CommunityListIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "community_list_id__n", runtime.ParamLocationQuery, *params.CommunityListIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListRuleBulkPartialUpdateRequest calls the generic PluginsBgpCommunityListRuleBulkPartialUpdate builder with application/json body
func NewPluginsBgpCommunityListRuleBulkPartialUpdateRequest(server string, body PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRuleBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRuleBulkPartialUpdateRequestWithBody generates requests for PluginsBgpCommunityListRuleBulkPartialUpdate with any type of body
func NewPluginsBgpCommunityListRuleBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleCreateRequest calls the generic PluginsBgpCommunityListRuleCreate builder with application/json body
func NewPluginsBgpCommunityListRuleCreateRequest(server string, body PluginsBgpCommunityListRuleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRuleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRuleCreateRequestWithBody generates requests for PluginsBgpCommunityListRuleCreate with any type of body
func NewPluginsBgpCommunityListRuleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleBulkUpdateRequest calls the generic PluginsBgpCommunityListRuleBulkUpdate builder with application/json body
func NewPluginsBgpCommunityListRuleBulkUpdateRequest(server string, body PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRuleBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRuleBulkUpdateRequestWithBody generates requests for PluginsBgpCommunityListRuleBulkUpdate with any type of body
func NewPluginsBgpCommunityListRuleBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleDestroyRequest generates requests for PluginsBgpCommunityListRuleDestroy
func NewPluginsBgpCommunityListRuleDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListRuleRetrieveRequest generates requests for PluginsBgpCommunityListRuleRetrieve
func NewPluginsBgpCommunityListRuleRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListRulePartialUpdateRequest calls the generic PluginsBgpCommunityListRulePartialUpdate builder with application/json body
func NewPluginsBgpCommunityListRulePartialUpdateRequest(server string, id int, body PluginsBgpCommunityListRulePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRulePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRulePartialUpdateRequestWithBody generates requests for PluginsBgpCommunityListRulePartialUpdate with any type of body
func NewPluginsBgpCommunityListRulePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRuleUpdateRequest calls the generic PluginsBgpCommunityListRuleUpdate builder with application/json body
func NewPluginsBgpCommunityListRuleUpdateRequest(server string, id int, body PluginsBgpCommunityListRuleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListRuleUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListRuleUpdateRequestWithBody generates requests for PluginsBgpCommunityListRuleUpdate with any type of body
func NewPluginsBgpCommunityListRuleUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListBulkDestroyRequest calls the generic PluginsBgpCommunityListBulkDestroy builder with application/json body
func NewPluginsBgpCommunityListBulkDestroyRequest(server string, body PluginsBgpCommunityListBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListBulkDestroyRequestWithBody generates requests for PluginsBgpCommunityListBulkDestroy with any type of body
func NewPluginsBgpCommunityListBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListListRequest generates requests for PluginsBgpCommunityListList
func NewPluginsBgpCommunityListListRequest(server string, params *PluginsBgpCommunityListListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListBulkPartialUpdateRequest calls the generic PluginsBgpCommunityListBulkPartialUpdate builder with application/json body
func NewPluginsBgpCommunityListBulkPartialUpdateRequest(server string, body PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListBulkPartialUpdateRequestWithBody generates requests for PluginsBgpCommunityListBulkPartialUpdate with any type of body
func NewPluginsBgpCommunityListBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListCreateRequest calls the generic PluginsBgpCommunityListCreate builder with application/json body
func NewPluginsBgpCommunityListCreateRequest(server string, body PluginsBgpCommunityListCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListCreateRequestWithBody generates requests for PluginsBgpCommunityListCreate with any type of body
func NewPluginsBgpCommunityListCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListBulkUpdateRequest calls the generic PluginsBgpCommunityListBulkUpdate builder with application/json body
func NewPluginsBgpCommunityListBulkUpdateRequest(server string, body PluginsBgpCommunityListBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListBulkUpdateRequestWithBody generates requests for PluginsBgpCommunityListBulkUpdate with any type of body
func NewPluginsBgpCommunityListBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListDestroyRequest generates requests for PluginsBgpCommunityListDestroy
func NewPluginsBgpCommunityListDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListRetrieveRequest generates requests for PluginsBgpCommunityListRetrieve
func NewPluginsBgpCommunityListRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityListPartialUpdateRequest calls the generic PluginsBgpCommunityListPartialUpdate builder with application/json body
func NewPluginsBgpCommunityListPartialUpdateRequest(server string, id int, body PluginsBgpCommunityListPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListPartialUpdateRequestWithBody generates requests for PluginsBgpCommunityListPartialUpdate with any type of body
func NewPluginsBgpCommunityListPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListUpdateRequest calls the generic PluginsBgpCommunityListUpdate builder with application/json body
func NewPluginsBgpCommunityListUpdateRequest(server string, id int, body PluginsBgpCommunityListUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityListUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityListUpdateRequestWithBody generates requests for PluginsBgpCommunityListUpdate with any type of body
func NewPluginsBgpCommunityListUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityBulkDestroyRequest calls the generic PluginsBgpCommunityBulkDestroy builder with application/json body
func NewPluginsBgpCommunityBulkDestroyRequest(server string, body PluginsBgpCommunityBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityBulkDestroyRequestWithBody generates requests for PluginsBgpCommunityBulkDestroy with any type of body
func NewPluginsBgpCommunityBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityListRequest generates requests for PluginsBgpCommunityList
func NewPluginsBgpCommunityListRequest(server string, params *PluginsBgpCommunityListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Value != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value", runtime.ParamLocationQuery, *params.Value); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__empty", runtime.ParamLocationQuery, *params.ValueEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ic", runtime.ParamLocationQuery, *params.ValueIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__ie", runtime.ParamLocationQuery, *params.ValueIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__iew", runtime.ParamLocationQuery, *params.ValueIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__isw", runtime.ParamLocationQuery, *params.ValueIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__n", runtime.ParamLocationQuery, *params.ValueN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nic", runtime.ParamLocationQuery, *params.ValueNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nie", runtime.ParamLocationQuery, *params.ValueNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__niew", runtime.ParamLocationQuery, *params.ValueNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ValueNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "value__nisw", runtime.ParamLocationQuery, *params.ValueNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityBulkPartialUpdateRequest calls the generic PluginsBgpCommunityBulkPartialUpdate builder with application/json body
func NewPluginsBgpCommunityBulkPartialUpdateRequest(server string, body PluginsBgpCommunityBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityBulkPartialUpdateRequestWithBody generates requests for PluginsBgpCommunityBulkPartialUpdate with any type of body
func NewPluginsBgpCommunityBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityCreateRequest calls the generic PluginsBgpCommunityCreate builder with application/json body
func NewPluginsBgpCommunityCreateRequest(server string, body PluginsBgpCommunityCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityCreateRequestWithBody generates requests for PluginsBgpCommunityCreate with any type of body
func NewPluginsBgpCommunityCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityBulkUpdateRequest calls the generic PluginsBgpCommunityBulkUpdate builder with application/json body
func NewPluginsBgpCommunityBulkUpdateRequest(server string, body PluginsBgpCommunityBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpCommunityBulkUpdateRequestWithBody generates requests for PluginsBgpCommunityBulkUpdate with any type of body
func NewPluginsBgpCommunityBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityDestroyRequest generates requests for PluginsBgpCommunityDestroy
func NewPluginsBgpCommunityDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityRetrieveRequest generates requests for PluginsBgpCommunityRetrieve
func NewPluginsBgpCommunityRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpCommunityPartialUpdateRequest calls the generic PluginsBgpCommunityPartialUpdate builder with application/json body
func NewPluginsBgpCommunityPartialUpdateRequest(server string, id int, body PluginsBgpCommunityPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityPartialUpdateRequestWithBody generates requests for PluginsBgpCommunityPartialUpdate with any type of body
func NewPluginsBgpCommunityPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpCommunityUpdateRequest calls the generic PluginsBgpCommunityUpdate builder with application/json body
func NewPluginsBgpCommunityUpdateRequest(server string, id int, body PluginsBgpCommunityUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpCommunityUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpCommunityUpdateRequestWithBody generates requests for PluginsBgpCommunityUpdate with any type of body
func NewPluginsBgpCommunityUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/community/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupBulkDestroyRequest calls the generic PluginsBgpPeerGroupBulkDestroy builder with application/json body
func NewPluginsBgpPeerGroupBulkDestroyRequest(server string, body PluginsBgpPeerGroupBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupBulkDestroyRequestWithBody generates requests for PluginsBgpPeerGroupBulkDestroy with any type of body
func NewPluginsBgpPeerGroupBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupListRequest generates requests for PluginsBgpPeerGroupList
func NewPluginsBgpPeerGroupListRequest(server string, params *PluginsBgpPeerGroupListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPeerGroupBulkPartialUpdateRequest calls the generic PluginsBgpPeerGroupBulkPartialUpdate builder with application/json body
func NewPluginsBgpPeerGroupBulkPartialUpdateRequest(server string, body PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupBulkPartialUpdateRequestWithBody generates requests for PluginsBgpPeerGroupBulkPartialUpdate with any type of body
func NewPluginsBgpPeerGroupBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupCreateRequest calls the generic PluginsBgpPeerGroupCreate builder with application/json body
func NewPluginsBgpPeerGroupCreateRequest(server string, body PluginsBgpPeerGroupCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupCreateRequestWithBody generates requests for PluginsBgpPeerGroupCreate with any type of body
func NewPluginsBgpPeerGroupCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupBulkUpdateRequest calls the generic PluginsBgpPeerGroupBulkUpdate builder with application/json body
func NewPluginsBgpPeerGroupBulkUpdateRequest(server string, body PluginsBgpPeerGroupBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupBulkUpdateRequestWithBody generates requests for PluginsBgpPeerGroupBulkUpdate with any type of body
func NewPluginsBgpPeerGroupBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupDestroyRequest generates requests for PluginsBgpPeerGroupDestroy
func NewPluginsBgpPeerGroupDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPeerGroupRetrieveRequest generates requests for PluginsBgpPeerGroupRetrieve
func NewPluginsBgpPeerGroupRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPeerGroupPartialUpdateRequest calls the generic PluginsBgpPeerGroupPartialUpdate builder with application/json body
func NewPluginsBgpPeerGroupPartialUpdateRequest(server string, id int, body PluginsBgpPeerGroupPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupPartialUpdateRequestWithBody generates requests for PluginsBgpPeerGroupPartialUpdate with any type of body
func NewPluginsBgpPeerGroupPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPeerGroupUpdateRequest calls the generic PluginsBgpPeerGroupUpdate builder with application/json body
func NewPluginsBgpPeerGroupUpdateRequest(server string, id int, body PluginsBgpPeerGroupUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPeerGroupUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPeerGroupUpdateRequestWithBody generates requests for PluginsBgpPeerGroupUpdate with any type of body
func NewPluginsBgpPeerGroupUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/peer-group/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleBulkDestroyRequest calls the generic PluginsBgpPrefixListRuleBulkDestroy builder with application/json body
func NewPluginsBgpPrefixListRuleBulkDestroyRequest(server string, body PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRuleBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRuleBulkDestroyRequestWithBody generates requests for PluginsBgpPrefixListRuleBulkDestroy with any type of body
func NewPluginsBgpPrefixListRuleBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleListRequest generates requests for PluginsBgpPrefixListRuleList
func NewPluginsBgpPrefixListRuleListRequest(server string, params *PluginsBgpPrefixListRuleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action__n", runtime.ParamLocationQuery, *params.ActionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge", runtime.ParamLocationQuery, *params.Ge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__empty", runtime.ParamLocationQuery, *params.GeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__gt", runtime.ParamLocationQuery, *params.GeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__gte", runtime.ParamLocationQuery, *params.GeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__lt", runtime.ParamLocationQuery, *params.GeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__lte", runtime.ParamLocationQuery, *params.GeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.GeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ge__n", runtime.ParamLocationQuery, *params.GeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__empty", runtime.ParamLocationQuery, *params.IndexEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__gt", runtime.ParamLocationQuery, *params.IndexGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__gte", runtime.ParamLocationQuery, *params.IndexGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__lt", runtime.ParamLocationQuery, *params.IndexLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__lte", runtime.ParamLocationQuery, *params.IndexLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__n", runtime.ParamLocationQuery, *params.IndexN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Le != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le", runtime.ParamLocationQuery, *params.Le); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__empty", runtime.ParamLocationQuery, *params.LeEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__gt", runtime.ParamLocationQuery, *params.LeGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__gte", runtime.ParamLocationQuery, *params.LeGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__lt", runtime.ParamLocationQuery, *params.LeLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__lte", runtime.ParamLocationQuery, *params.LeLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LeN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "le__n", runtime.ParamLocationQuery, *params.LeN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixList != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_list", runtime.ParamLocationQuery, *params.PrefixList); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixListN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_list__n", runtime.ParamLocationQuery, *params.PrefixListN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixListId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_list_id", runtime.ParamLocationQuery, *params.PrefixListId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PrefixListIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "prefix_list_id__n", runtime.ParamLocationQuery, *params.PrefixListIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListRuleBulkPartialUpdateRequest calls the generic PluginsBgpPrefixListRuleBulkPartialUpdate builder with application/json body
func NewPluginsBgpPrefixListRuleBulkPartialUpdateRequest(server string, body PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRuleBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRuleBulkPartialUpdateRequestWithBody generates requests for PluginsBgpPrefixListRuleBulkPartialUpdate with any type of body
func NewPluginsBgpPrefixListRuleBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleCreateRequest calls the generic PluginsBgpPrefixListRuleCreate builder with application/json body
func NewPluginsBgpPrefixListRuleCreateRequest(server string, body PluginsBgpPrefixListRuleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRuleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRuleCreateRequestWithBody generates requests for PluginsBgpPrefixListRuleCreate with any type of body
func NewPluginsBgpPrefixListRuleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleBulkUpdateRequest calls the generic PluginsBgpPrefixListRuleBulkUpdate builder with application/json body
func NewPluginsBgpPrefixListRuleBulkUpdateRequest(server string, body PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRuleBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRuleBulkUpdateRequestWithBody generates requests for PluginsBgpPrefixListRuleBulkUpdate with any type of body
func NewPluginsBgpPrefixListRuleBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleDestroyRequest generates requests for PluginsBgpPrefixListRuleDestroy
func NewPluginsBgpPrefixListRuleDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListRuleRetrieveRequest generates requests for PluginsBgpPrefixListRuleRetrieve
func NewPluginsBgpPrefixListRuleRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListRulePartialUpdateRequest calls the generic PluginsBgpPrefixListRulePartialUpdate builder with application/json body
func NewPluginsBgpPrefixListRulePartialUpdateRequest(server string, id int, body PluginsBgpPrefixListRulePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRulePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRulePartialUpdateRequestWithBody generates requests for PluginsBgpPrefixListRulePartialUpdate with any type of body
func NewPluginsBgpPrefixListRulePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListRuleUpdateRequest calls the generic PluginsBgpPrefixListRuleUpdate builder with application/json body
func NewPluginsBgpPrefixListRuleUpdateRequest(server string, id int, body PluginsBgpPrefixListRuleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListRuleUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListRuleUpdateRequestWithBody generates requests for PluginsBgpPrefixListRuleUpdate with any type of body
func NewPluginsBgpPrefixListRuleUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListBulkDestroyRequest calls the generic PluginsBgpPrefixListBulkDestroy builder with application/json body
func NewPluginsBgpPrefixListBulkDestroyRequest(server string, body PluginsBgpPrefixListBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListBulkDestroyRequestWithBody generates requests for PluginsBgpPrefixListBulkDestroy with any type of body
func NewPluginsBgpPrefixListBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListListRequest generates requests for PluginsBgpPrefixListList
func NewPluginsBgpPrefixListListRequest(server string, params *PluginsBgpPrefixListListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListBulkPartialUpdateRequest calls the generic PluginsBgpPrefixListBulkPartialUpdate builder with application/json body
func NewPluginsBgpPrefixListBulkPartialUpdateRequest(server string, body PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListBulkPartialUpdateRequestWithBody generates requests for PluginsBgpPrefixListBulkPartialUpdate with any type of body
func NewPluginsBgpPrefixListBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListCreateRequest calls the generic PluginsBgpPrefixListCreate builder with application/json body
func NewPluginsBgpPrefixListCreateRequest(server string, body PluginsBgpPrefixListCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListCreateRequestWithBody generates requests for PluginsBgpPrefixListCreate with any type of body
func NewPluginsBgpPrefixListCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListBulkUpdateRequest calls the generic PluginsBgpPrefixListBulkUpdate builder with application/json body
func NewPluginsBgpPrefixListBulkUpdateRequest(server string, body PluginsBgpPrefixListBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListBulkUpdateRequestWithBody generates requests for PluginsBgpPrefixListBulkUpdate with any type of body
func NewPluginsBgpPrefixListBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListDestroyRequest generates requests for PluginsBgpPrefixListDestroy
func NewPluginsBgpPrefixListDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListRetrieveRequest generates requests for PluginsBgpPrefixListRetrieve
func NewPluginsBgpPrefixListRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpPrefixListPartialUpdateRequest calls the generic PluginsBgpPrefixListPartialUpdate builder with application/json body
func NewPluginsBgpPrefixListPartialUpdateRequest(server string, id int, body PluginsBgpPrefixListPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListPartialUpdateRequestWithBody generates requests for PluginsBgpPrefixListPartialUpdate with any type of body
func NewPluginsBgpPrefixListPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpPrefixListUpdateRequest calls the generic PluginsBgpPrefixListUpdate builder with application/json body
func NewPluginsBgpPrefixListUpdateRequest(server string, id int, body PluginsBgpPrefixListUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpPrefixListUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpPrefixListUpdateRequestWithBody generates requests for PluginsBgpPrefixListUpdate with any type of body
func NewPluginsBgpPrefixListUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/prefix-list/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleBulkDestroyRequest calls the generic PluginsBgpRoutingPolicyRuleBulkDestroy builder with application/json body
func NewPluginsBgpRoutingPolicyRuleBulkDestroyRequest(server string, body PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRuleBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRuleBulkDestroyRequestWithBody generates requests for PluginsBgpRoutingPolicyRuleBulkDestroy with any type of body
func NewPluginsBgpRoutingPolicyRuleBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleListRequest generates requests for PluginsBgpRoutingPolicyRuleList
func NewPluginsBgpRoutingPolicyRuleListRequest(server string, params *PluginsBgpRoutingPolicyRuleListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Action != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action", runtime.ParamLocationQuery, *params.Action); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ActionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "action__n", runtime.ParamLocationQuery, *params.ActionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntry != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry", runtime.ParamLocationQuery, *params.ContinueEntry); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__empty", runtime.ParamLocationQuery, *params.ContinueEntryEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__gt", runtime.ParamLocationQuery, *params.ContinueEntryGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__gte", runtime.ParamLocationQuery, *params.ContinueEntryGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__lt", runtime.ParamLocationQuery, *params.ContinueEntryLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__lte", runtime.ParamLocationQuery, *params.ContinueEntryLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinueEntryN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continue_entry__n", runtime.ParamLocationQuery, *params.ContinueEntryN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__empty", runtime.ParamLocationQuery, *params.IndexEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__gt", runtime.ParamLocationQuery, *params.IndexGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__gte", runtime.ParamLocationQuery, *params.IndexGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__lt", runtime.ParamLocationQuery, *params.IndexLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__lte", runtime.ParamLocationQuery, *params.IndexLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IndexN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index__n", runtime.ParamLocationQuery, *params.IndexN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoutingPolicyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routing_policy_id", runtime.ParamLocationQuery, *params.RoutingPolicyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RoutingPolicyIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "routing_policy_id__n", runtime.ParamLocationQuery, *params.RoutingPolicyIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest calls the generic PluginsBgpRoutingPolicyRuleBulkPartialUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequest(server string, body PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyRuleBulkPartialUpdate with any type of body
func NewPluginsBgpRoutingPolicyRuleBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleCreateRequest calls the generic PluginsBgpRoutingPolicyRuleCreate builder with application/json body
func NewPluginsBgpRoutingPolicyRuleCreateRequest(server string, body PluginsBgpRoutingPolicyRuleCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRuleCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRuleCreateRequestWithBody generates requests for PluginsBgpRoutingPolicyRuleCreate with any type of body
func NewPluginsBgpRoutingPolicyRuleCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleBulkUpdateRequest calls the generic PluginsBgpRoutingPolicyRuleBulkUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyRuleBulkUpdateRequest(server string, body PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRuleBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRuleBulkUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyRuleBulkUpdate with any type of body
func NewPluginsBgpRoutingPolicyRuleBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleDestroyRequest generates requests for PluginsBgpRoutingPolicyRuleDestroy
func NewPluginsBgpRoutingPolicyRuleDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleRetrieveRequest generates requests for PluginsBgpRoutingPolicyRuleRetrieve
func NewPluginsBgpRoutingPolicyRuleRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyRulePartialUpdateRequest calls the generic PluginsBgpRoutingPolicyRulePartialUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyRulePartialUpdateRequest(server string, id int, body PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRulePartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRulePartialUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyRulePartialUpdate with any type of body
func NewPluginsBgpRoutingPolicyRulePartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyRuleUpdateRequest calls the generic PluginsBgpRoutingPolicyRuleUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyRuleUpdateRequest(server string, id int, body PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyRuleUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyRuleUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyRuleUpdate with any type of body
func NewPluginsBgpRoutingPolicyRuleUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy-rule/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyBulkDestroyRequest calls the generic PluginsBgpRoutingPolicyBulkDestroy builder with application/json body
func NewPluginsBgpRoutingPolicyBulkDestroyRequest(server string, body PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyBulkDestroyRequestWithBody generates requests for PluginsBgpRoutingPolicyBulkDestroy with any type of body
func NewPluginsBgpRoutingPolicyBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyListRequest generates requests for PluginsBgpRoutingPolicyList
func NewPluginsBgpRoutingPolicyListRequest(server string, params *PluginsBgpRoutingPolicyListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyBulkPartialUpdateRequest calls the generic PluginsBgpRoutingPolicyBulkPartialUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyBulkPartialUpdateRequest(server string, body PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyBulkPartialUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyBulkPartialUpdate with any type of body
func NewPluginsBgpRoutingPolicyBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyCreateRequest calls the generic PluginsBgpRoutingPolicyCreate builder with application/json body
func NewPluginsBgpRoutingPolicyCreateRequest(server string, body PluginsBgpRoutingPolicyCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyCreateRequestWithBody generates requests for PluginsBgpRoutingPolicyCreate with any type of body
func NewPluginsBgpRoutingPolicyCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyBulkUpdateRequest calls the generic PluginsBgpRoutingPolicyBulkUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyBulkUpdateRequest(server string, body PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyBulkUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyBulkUpdate with any type of body
func NewPluginsBgpRoutingPolicyBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyDestroyRequest generates requests for PluginsBgpRoutingPolicyDestroy
func NewPluginsBgpRoutingPolicyDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyRetrieveRequest generates requests for PluginsBgpRoutingPolicyRetrieve
func NewPluginsBgpRoutingPolicyRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpRoutingPolicyPartialUpdateRequest calls the generic PluginsBgpRoutingPolicyPartialUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyPartialUpdateRequest(server string, id int, body PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyPartialUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyPartialUpdate with any type of body
func NewPluginsBgpRoutingPolicyPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpRoutingPolicyUpdateRequest calls the generic PluginsBgpRoutingPolicyUpdate builder with application/json body
func NewPluginsBgpRoutingPolicyUpdateRequest(server string, id int, body PluginsBgpRoutingPolicyUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpRoutingPolicyUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpRoutingPolicyUpdateRequestWithBody generates requests for PluginsBgpRoutingPolicyUpdate with any type of body
func NewPluginsBgpRoutingPolicyUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/routing-policy/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionBulkDestroyRequest calls the generic PluginsBgpSessionBulkDestroy builder with application/json body
func NewPluginsBgpSessionBulkDestroyRequest(server string, body PluginsBgpSessionBulkDestroyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionBulkDestroyRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpSessionBulkDestroyRequestWithBody generates requests for PluginsBgpSessionBulkDestroy with any type of body
func NewPluginsBgpSessionBulkDestroyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionListRequest generates requests for PluginsBgpSessionList
func NewPluginsBgpSessionListRequest(server string, params *PluginsBgpSessionListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ByLocalAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "by_local_address", runtime.ParamLocationQuery, *params.ByLocalAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ByRemoteAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "by_remote_address", runtime.ParamLocationQuery, *params.ByRemoteAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Created != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created", runtime.ParamLocationQuery, *params.Created); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__empty", runtime.ParamLocationQuery, *params.CreatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gt", runtime.ParamLocationQuery, *params.CreatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__gte", runtime.ParamLocationQuery, *params.CreatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lt", runtime.ParamLocationQuery, *params.CreatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__lte", runtime.ParamLocationQuery, *params.CreatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created__n", runtime.ParamLocationQuery, *params.CreatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CreatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "created_by_request", runtime.ParamLocationQuery, *params.CreatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Description != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description", runtime.ParamLocationQuery, *params.Description); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__empty", runtime.ParamLocationQuery, *params.DescriptionEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ic", runtime.ParamLocationQuery, *params.DescriptionIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__ie", runtime.ParamLocationQuery, *params.DescriptionIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__iew", runtime.ParamLocationQuery, *params.DescriptionIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__isw", runtime.ParamLocationQuery, *params.DescriptionIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__n", runtime.ParamLocationQuery, *params.DescriptionN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nic", runtime.ParamLocationQuery, *params.DescriptionNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nie", runtime.ParamLocationQuery, *params.DescriptionNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__niew", runtime.ParamLocationQuery, *params.DescriptionNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DescriptionNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "description__nisw", runtime.ParamLocationQuery, *params.DescriptionNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Device != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device", runtime.ParamLocationQuery, *params.Device); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device__n", runtime.ParamLocationQuery, *params.DeviceN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id", runtime.ParamLocationQuery, *params.DeviceId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.DeviceIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "device_id__n", runtime.ParamLocationQuery, *params.DeviceIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportPolicies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_policies", runtime.ParamLocationQuery, *params.ExportPolicies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExportPoliciesN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "export_policies__n", runtime.ParamLocationQuery, *params.ExportPoliciesN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Id != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__empty", runtime.ParamLocationQuery, *params.IdEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gt", runtime.ParamLocationQuery, *params.IdGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__gte", runtime.ParamLocationQuery, *params.IdGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lt", runtime.ParamLocationQuery, *params.IdLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__lte", runtime.ParamLocationQuery, *params.IdLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id__n", runtime.ParamLocationQuery, *params.IdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportPolicies != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_policies", runtime.ParamLocationQuery, *params.ImportPolicies); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportPoliciesN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_policies__n", runtime.ParamLocationQuery, *params.ImportPoliciesN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdated != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated", runtime.ParamLocationQuery, *params.LastUpdated); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__empty", runtime.ParamLocationQuery, *params.LastUpdatedEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gt", runtime.ParamLocationQuery, *params.LastUpdatedGt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedGte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__gte", runtime.ParamLocationQuery, *params.LastUpdatedGte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lt", runtime.ParamLocationQuery, *params.LastUpdatedLt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedLte != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__lte", runtime.ParamLocationQuery, *params.LastUpdatedLte); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastUpdatedN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_updated__n", runtime.ParamLocationQuery, *params.LastUpdatedN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address", runtime.ParamLocationQuery, *params.LocalAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address__n", runtime.ParamLocationQuery, *params.LocalAddressN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address_id", runtime.ParamLocationQuery, *params.LocalAddressId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAddressIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_address_id__n", runtime.ParamLocationQuery, *params.LocalAddressIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as", runtime.ParamLocationQuery, *params.LocalAs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as__n", runtime.ParamLocationQuery, *params.LocalAsN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as_id", runtime.ParamLocationQuery, *params.LocalAsId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LocalAsIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "local_as_id__n", runtime.ParamLocationQuery, *params.LocalAsIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ModifiedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "modified_by_request", runtime.ParamLocationQuery, *params.ModifiedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameEmpty != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__empty", runtime.ParamLocationQuery, *params.NameEmpty); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ic", runtime.ParamLocationQuery, *params.NameIc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIe != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__ie", runtime.ParamLocationQuery, *params.NameIe); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__iew", runtime.ParamLocationQuery, *params.NameIew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameIsw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__isw", runtime.ParamLocationQuery, *params.NameIsw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__n", runtime.ParamLocationQuery, *params.NameN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNic != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nic", runtime.ParamLocationQuery, *params.NameNic); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNie != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nie", runtime.ParamLocationQuery, *params.NameNie); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNiew != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__niew", runtime.ParamLocationQuery, *params.NameNiew); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.NameNisw != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name__nisw", runtime.ParamLocationQuery, *params.NameNisw); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Ordering != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ordering", runtime.ParamLocationQuery, *params.Ordering); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeerGroup != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_group", runtime.ParamLocationQuery, *params.PeerGroup); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PeerGroupN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "peer_group__n", runtime.ParamLocationQuery, *params.PeerGroupN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Q != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, *params.Q); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddress != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address", runtime.ParamLocationQuery, *params.RemoteAddress); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address__n", runtime.ParamLocationQuery, *params.RemoteAddressN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address_id", runtime.ParamLocationQuery, *params.RemoteAddressId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAddressIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_address_id__n", runtime.ParamLocationQuery, *params.RemoteAddressIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as", runtime.ParamLocationQuery, *params.RemoteAs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as__n", runtime.ParamLocationQuery, *params.RemoteAsN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as_id", runtime.ParamLocationQuery, *params.RemoteAsId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.RemoteAsIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "remote_as_id__n", runtime.ParamLocationQuery, *params.RemoteAsIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Site != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site", runtime.ParamLocationQuery, *params.Site); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site__n", runtime.ParamLocationQuery, *params.SiteN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id", runtime.ParamLocationQuery, *params.SiteId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteIdN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "site_id__n", runtime.ParamLocationQuery, *params.SiteIdN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StatusN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status__n", runtime.ParamLocationQuery, *params.StatusN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tag != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag", runtime.ParamLocationQuery, *params.Tag); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TagN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tag__n", runtime.ParamLocationQuery, *params.TagN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Tenant != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant", runtime.ParamLocationQuery, *params.Tenant); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TenantN != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tenant__n", runtime.ParamLocationQuery, *params.TenantN); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UpdatedByRequest != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "updated_by_request", runtime.ParamLocationQuery, *params.UpdatedByRequest); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpSessionBulkPartialUpdateRequest calls the generic PluginsBgpSessionBulkPartialUpdate builder with application/json body
func NewPluginsBgpSessionBulkPartialUpdateRequest(server string, body PluginsBgpSessionBulkPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionBulkPartialUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpSessionBulkPartialUpdateRequestWithBody generates requests for PluginsBgpSessionBulkPartialUpdate with any type of body
func NewPluginsBgpSessionBulkPartialUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionCreateRequest calls the generic PluginsBgpSessionCreate builder with application/json body
func NewPluginsBgpSessionCreateRequest(server string, body PluginsBgpSessionCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpSessionCreateRequestWithBody generates requests for PluginsBgpSessionCreate with any type of body
func NewPluginsBgpSessionCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionBulkUpdateRequest calls the generic PluginsBgpSessionBulkUpdate builder with application/json body
func NewPluginsBgpSessionBulkUpdateRequest(server string, body PluginsBgpSessionBulkUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionBulkUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewPluginsBgpSessionBulkUpdateRequestWithBody generates requests for PluginsBgpSessionBulkUpdate with any type of body
func NewPluginsBgpSessionBulkUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionDestroyRequest generates requests for PluginsBgpSessionDestroy
func NewPluginsBgpSessionDestroyRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpSessionRetrieveRequest generates requests for PluginsBgpSessionRetrieve
func NewPluginsBgpSessionRetrieveRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPluginsBgpSessionPartialUpdateRequest calls the generic PluginsBgpSessionPartialUpdate builder with application/json body
func NewPluginsBgpSessionPartialUpdateRequest(server string, id int, body PluginsBgpSessionPartialUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionPartialUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpSessionPartialUpdateRequestWithBody generates requests for PluginsBgpSessionPartialUpdate with any type of body
func NewPluginsBgpSessionPartialUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPluginsBgpSessionUpdateRequest calls the generic PluginsBgpSessionUpdate builder with application/json body
func NewPluginsBgpSessionUpdateRequest(server string, id int, body PluginsBgpSessionUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPluginsBgpSessionUpdateRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPluginsBgpSessionUpdateRequestWithBody generates requests for PluginsBgpSessionUpdate with any type of body
func NewPluginsBgpSessionUpdateRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/plugins/bgp/session/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PluginsBgpBgppeergroupBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkDestroyResponse, error)

	PluginsBgpBgppeergroupBulkDestroyWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkDestroyResponse, error)

	// PluginsBgpBgppeergroupListWithResponse request
	PluginsBgpBgppeergroupListWithResponse(ctx context.Context, params *PluginsBgpBgppeergroupListParams, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupListResponse, error)

	// PluginsBgpBgppeergroupBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkPartialUpdateResponse, error)

	PluginsBgpBgppeergroupBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkPartialUpdateResponse, error)

	// PluginsBgpBgppeergroupCreateWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupCreateResponse, error)

	PluginsBgpBgppeergroupCreateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupCreateResponse, error)

	// PluginsBgpBgppeergroupBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkUpdateResponse, error)

	PluginsBgpBgppeergroupBulkUpdateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkUpdateResponse, error)

	// PluginsBgpBgppeergroupDestroyWithResponse request
	PluginsBgpBgppeergroupDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupDestroyResponse, error)

	// PluginsBgpBgppeergroupRetrieveWithResponse request
	PluginsBgpBgppeergroupRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupRetrieveResponse, error)

	// PluginsBgpBgppeergroupPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupPartialUpdateResponse, error)

	PluginsBgpBgppeergroupPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgppeergroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupPartialUpdateResponse, error)

	// PluginsBgpBgppeergroupUpdateWithBodyWithResponse request with any body
	PluginsBgpBgppeergroupUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupUpdateResponse, error)

	PluginsBgpBgppeergroupUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgppeergroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupUpdateResponse, error)

	// PluginsBgpBgpsessionBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpBgpsessionBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkDestroyResponse, error)

	PluginsBgpBgpsessionBulkDestroyWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkDestroyResponse, error)

	// PluginsBgpBgpsessionListWithResponse request
	PluginsBgpBgpsessionListWithResponse(ctx context.Context, params *PluginsBgpBgpsessionListParams, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionListResponse, error)

	// PluginsBgpBgpsessionBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpBgpsessionBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkPartialUpdateResponse, error)

	PluginsBgpBgpsessionBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkPartialUpdateResponse, error)

	// PluginsBgpBgpsessionCreateWithBodyWithResponse request with any body
	PluginsBgpBgpsessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionCreateResponse, error)

	PluginsBgpBgpsessionCreateWithResponse(ctx context.Context, body PluginsBgpBgpsessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionCreateResponse, error)

	// PluginsBgpBgpsessionBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpBgpsessionBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkUpdateResponse, error)

	PluginsBgpBgpsessionBulkUpdateWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkUpdateResponse, error)

	// PluginsBgpBgpsessionDestroyWithResponse request
	PluginsBgpBgpsessionDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionDestroyResponse, error)

	// PluginsBgpBgpsessionRetrieveWithResponse request
	PluginsBgpBgpsessionRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionRetrieveResponse, error)

	// PluginsBgpBgpsessionPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpBgpsessionPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionPartialUpdateResponse, error)

	PluginsBgpBgpsessionPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgpsessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionPartialUpdateResponse, error)

	// PluginsBgpBgpsessionUpdateWithBodyWithResponse request with any body
	PluginsBgpBgpsessionUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionUpdateResponse, error)

	PluginsBgpBgpsessionUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgpsessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionUpdateResponse, error)

	// PluginsBgpCommunityListRuleBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpCommunityListRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkDestroyResponse, error)

	PluginsBgpCommunityListRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkDestroyResponse, error)

	// PluginsBgpCommunityListRuleListWithResponse request
	PluginsBgpCommunityListRuleListWithResponse(ctx context.Context, params *PluginsBgpCommunityListRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleListResponse, error)

	// PluginsBgpCommunityListRuleBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkPartialUpdateResponse, error)

	PluginsBgpCommunityListRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkPartialUpdateResponse, error)

	// PluginsBgpCommunityListRuleCreateWithBodyWithResponse request with any body
	PluginsBgpCommunityListRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleCreateResponse, error)

	PluginsBgpCommunityListRuleCreateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleCreateResponse, error)

	// PluginsBgpCommunityListRuleBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkUpdateResponse, error)

	PluginsBgpCommunityListRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkUpdateResponse, error)

	// PluginsBgpCommunityListRuleDestroyWithResponse request
	PluginsBgpCommunityListRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleDestroyResponse, error)

	// PluginsBgpCommunityListRuleRetrieveWithResponse request
	PluginsBgpCommunityListRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleRetrieveResponse, error)

	// PluginsBgpCommunityListRulePartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRulePartialUpdateResponse, error)

	PluginsBgpCommunityListRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRulePartialUpdateResponse, error)

	// PluginsBgpCommunityListRuleUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleUpdateResponse, error)

	PluginsBgpCommunityListRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleUpdateResponse, error)

	// PluginsBgpCommunityListBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpCommunityListBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkDestroyResponse, error)

	PluginsBgpCommunityListBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkDestroyResponse, error)

	// PluginsBgpCommunityListListWithResponse request
	PluginsBgpCommunityListListWithResponse(ctx context.Context, params *PluginsBgpCommunityListListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListListResponse, error)

	// PluginsBgpCommunityListBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkPartialUpdateResponse, error)

	PluginsBgpCommunityListBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkPartialUpdateResponse, error)

	// PluginsBgpCommunityListCreateWithBodyWithResponse request with any body
	PluginsBgpCommunityListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListCreateResponse, error)

	PluginsBgpCommunityListCreateWithResponse(ctx context.Context, body PluginsBgpCommunityListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListCreateResponse, error)

	// PluginsBgpCommunityListBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkUpdateResponse, error)

	PluginsBgpCommunityListBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkUpdateResponse, error)

	// PluginsBgpCommunityListDestroyWithResponse request
	PluginsBgpCommunityListDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListDestroyResponse, error)

	// PluginsBgpCommunityListRetrieveWithResponse request
	PluginsBgpCommunityListRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRetrieveResponse, error)

	// PluginsBgpCommunityListPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListPartialUpdateResponse, error)

	PluginsBgpCommunityListPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListPartialUpdateResponse, error)

	// PluginsBgpCommunityListUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityListUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListUpdateResponse, error)

	PluginsBgpCommunityListUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListUpdateResponse, error)

	// PluginsBgpCommunityBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpCommunityBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkDestroyResponse, error)

	PluginsBgpCommunityBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkDestroyResponse, error)

	// PluginsBgpCommunityListWithResponse request
	PluginsBgpCommunityListWithResponse(ctx context.Context, params *PluginsBgpCommunityListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListResponse, error)

	// PluginsBgpCommunityBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkPartialUpdateResponse, error)

	PluginsBgpCommunityBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkPartialUpdateResponse, error)

	// PluginsBgpCommunityCreateWithBodyWithResponse request with any body
	PluginsBgpCommunityCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityCreateResponse, error)

	PluginsBgpCommunityCreateWithResponse(ctx context.Context, body PluginsBgpCommunityCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityCreateResponse, error)

	// PluginsBgpCommunityBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkUpdateResponse, error)

	PluginsBgpCommunityBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkUpdateResponse, error)

	// PluginsBgpCommunityDestroyWithResponse request
	PluginsBgpCommunityDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityDestroyResponse, error)

	// PluginsBgpCommunityRetrieveWithResponse request
	PluginsBgpCommunityRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityRetrieveResponse, error)

	// PluginsBgpCommunityPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityPartialUpdateResponse, error)

	PluginsBgpCommunityPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityPartialUpdateResponse, error)

	// PluginsBgpCommunityUpdateWithBodyWithResponse request with any body
	PluginsBgpCommunityUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityUpdateResponse, error)

	PluginsBgpCommunityUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityUpdateResponse, error)

	// PluginsBgpPeerGroupBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpPeerGroupBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkDestroyResponse, error)

	PluginsBgpPeerGroupBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkDestroyResponse, error)

	// PluginsBgpPeerGroupListWithResponse request
	PluginsBgpPeerGroupListWithResponse(ctx context.Context, params *PluginsBgpPeerGroupListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupListResponse, error)

	// PluginsBgpPeerGroupBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPeerGroupBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkPartialUpdateResponse, error)

	PluginsBgpPeerGroupBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkPartialUpdateResponse, error)

	// PluginsBgpPeerGroupCreateWithBodyWithResponse request with any body
	PluginsBgpPeerGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupCreateResponse, error)

	PluginsBgpPeerGroupCreateWithResponse(ctx context.Context, body PluginsBgpPeerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupCreateResponse, error)

	// PluginsBgpPeerGroupBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpPeerGroupBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkUpdateResponse, error)

	PluginsBgpPeerGroupBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkUpdateResponse, error)

	// PluginsBgpPeerGroupDestroyWithResponse request
	PluginsBgpPeerGroupDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupDestroyResponse, error)

	// PluginsBgpPeerGroupRetrieveWithResponse request
	PluginsBgpPeerGroupRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupRetrieveResponse, error)

	// PluginsBgpPeerGroupPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPeerGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupPartialUpdateResponse, error)

	PluginsBgpPeerGroupPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPeerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupPartialUpdateResponse, error)

	// PluginsBgpPeerGroupUpdateWithBodyWithResponse request with any body
	PluginsBgpPeerGroupUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupUpdateResponse, error)

	PluginsBgpPeerGroupUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPeerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupUpdateResponse, error)

	// PluginsBgpPrefixListRuleBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpPrefixListRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkDestroyResponse, error)

	PluginsBgpPrefixListRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkDestroyResponse, error)

	// PluginsBgpPrefixListRuleListWithResponse request
	PluginsBgpPrefixListRuleListWithResponse(ctx context.Context, params *PluginsBgpPrefixListRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleListResponse, error)

	// PluginsBgpPrefixListRuleBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkPartialUpdateResponse, error)

	PluginsBgpPrefixListRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkPartialUpdateResponse, error)

	// PluginsBgpPrefixListRuleCreateWithBodyWithResponse request with any body
	PluginsBgpPrefixListRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleCreateResponse, error)

	PluginsBgpPrefixListRuleCreateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleCreateResponse, error)

	// PluginsBgpPrefixListRuleBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkUpdateResponse, error)

	PluginsBgpPrefixListRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkUpdateResponse, error)

	// PluginsBgpPrefixListRuleDestroyWithResponse request
	PluginsBgpPrefixListRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleDestroyResponse, error)

	// PluginsBgpPrefixListRuleRetrieveWithResponse request
	PluginsBgpPrefixListRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleRetrieveResponse, error)

	// PluginsBgpPrefixListRulePartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRulePartialUpdateResponse, error)

	PluginsBgpPrefixListRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRulePartialUpdateResponse, error)

	// PluginsBgpPrefixListRuleUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleUpdateResponse, error)

	PluginsBgpPrefixListRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleUpdateResponse, error)

	// PluginsBgpPrefixListBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpPrefixListBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkDestroyResponse, error)

	PluginsBgpPrefixListBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkDestroyResponse, error)

	// PluginsBgpPrefixListListWithResponse request
	PluginsBgpPrefixListListWithResponse(ctx context.Context, params *PluginsBgpPrefixListListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListListResponse, error)

	// PluginsBgpPrefixListBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkPartialUpdateResponse, error)

	PluginsBgpPrefixListBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkPartialUpdateResponse, error)

	// PluginsBgpPrefixListCreateWithBodyWithResponse request with any body
	PluginsBgpPrefixListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListCreateResponse, error)

	PluginsBgpPrefixListCreateWithResponse(ctx context.Context, body PluginsBgpPrefixListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListCreateResponse, error)

	// PluginsBgpPrefixListBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkUpdateResponse, error)

	PluginsBgpPrefixListBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkUpdateResponse, error)

	// PluginsBgpPrefixListDestroyWithResponse request
	PluginsBgpPrefixListDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListDestroyResponse, error)

	// PluginsBgpPrefixListRetrieveWithResponse request
	PluginsBgpPrefixListRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRetrieveResponse, error)

	// PluginsBgpPrefixListPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListPartialUpdateResponse, error)

	PluginsBgpPrefixListPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListPartialUpdateResponse, error)

	// PluginsBgpPrefixListUpdateWithBodyWithResponse request with any body
	PluginsBgpPrefixListUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListUpdateResponse, error)

	PluginsBgpPrefixListUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListUpdateResponse, error)

	// PluginsBgpRoutingPolicyRuleBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkDestroyResponse, error)

	PluginsBgpRoutingPolicyRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkDestroyResponse, error)

	// PluginsBgpRoutingPolicyRuleListWithResponse request
	PluginsBgpRoutingPolicyRuleListWithResponse(ctx context.Context, params *PluginsBgpRoutingPolicyRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleListResponse, error)

	// PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse, error)

	PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse, error)

	// PluginsBgpRoutingPolicyRuleCreateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleCreateResponse, error)

	PluginsBgpRoutingPolicyRuleCreateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleCreateResponse, error)

	// PluginsBgpRoutingPolicyRuleBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkUpdateResponse, error)

	PluginsBgpRoutingPolicyRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkUpdateResponse, error)

	// PluginsBgpRoutingPolicyRuleDestroyWithResponse request
	PluginsBgpRoutingPolicyRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleDestroyResponse, error)

	// PluginsBgpRoutingPolicyRuleRetrieveWithResponse request
	PluginsBgpRoutingPolicyRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleRetrieveResponse, error)

	// PluginsBgpRoutingPolicyRulePartialUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRulePartialUpdateResponse, error)

	PluginsBgpRoutingPolicyRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRulePartialUpdateResponse, error)

	// PluginsBgpRoutingPolicyRuleUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleUpdateResponse, error)

	PluginsBgpRoutingPolicyRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleUpdateResponse, error)

	// PluginsBgpRoutingPolicyBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkDestroyResponse, error)

	PluginsBgpRoutingPolicyBulkDestroyWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkDestroyResponse, error)

	// PluginsBgpRoutingPolicyListWithResponse request
	PluginsBgpRoutingPolicyListWithResponse(ctx context.Context, params *PluginsBgpRoutingPolicyListParams, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyListResponse, error)

	// PluginsBgpRoutingPolicyBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkPartialUpdateResponse, error)

	PluginsBgpRoutingPolicyBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkPartialUpdateResponse, error)

	// PluginsBgpRoutingPolicyCreateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyCreateResponse, error)

	PluginsBgpRoutingPolicyCreateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyCreateResponse, error)

	// PluginsBgpRoutingPolicyBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkUpdateResponse, error)

	PluginsBgpRoutingPolicyBulkUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkUpdateResponse, error)

	// PluginsBgpRoutingPolicyDestroyWithResponse request
	PluginsBgpRoutingPolicyDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyDestroyResponse, error)

	// PluginsBgpRoutingPolicyRetrieveWithResponse request
	PluginsBgpRoutingPolicyRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRetrieveResponse, error)

	// PluginsBgpRoutingPolicyPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyPartialUpdateResponse, error)

	PluginsBgpRoutingPolicyPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyPartialUpdateResponse, error)

	// PluginsBgpRoutingPolicyUpdateWithBodyWithResponse request with any body
	PluginsBgpRoutingPolicyUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyUpdateResponse, error)

	PluginsBgpRoutingPolicyUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyUpdateResponse, error)

	// PluginsBgpSessionBulkDestroyWithBodyWithResponse request with any body
	PluginsBgpSessionBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkDestroyResponse, error)

	PluginsBgpSessionBulkDestroyWithResponse(ctx context.Context, body PluginsBgpSessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkDestroyResponse, error)

	// PluginsBgpSessionListWithResponse request
	PluginsBgpSessionListWithResponse(ctx context.Context, params *PluginsBgpSessionListParams, reqEditors ...RequestEditorFn) (*PluginsBgpSessionListResponse, error)

	// PluginsBgpSessionBulkPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpSessionBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkPartialUpdateResponse, error)

	PluginsBgpSessionBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpSessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkPartialUpdateResponse, error)

	// PluginsBgpSessionCreateWithBodyWithResponse request with any body
	PluginsBgpSessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionCreateResponse, error)

	PluginsBgpSessionCreateWithResponse(ctx context.Context, body PluginsBgpSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionCreateResponse, error)

	// PluginsBgpSessionBulkUpdateWithBodyWithResponse request with any body
	PluginsBgpSessionBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkUpdateResponse, error)

	PluginsBgpSessionBulkUpdateWithResponse(ctx context.Context, body PluginsBgpSessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkUpdateResponse, error)

	// PluginsBgpSessionDestroyWithResponse request
	PluginsBgpSessionDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpSessionDestroyResponse, error)

	// PluginsBgpSessionRetrieveWithResponse request
	PluginsBgpSessionRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpSessionRetrieveResponse, error)

	// PluginsBgpSessionPartialUpdateWithBodyWithResponse request with any body
	PluginsBgpSessionPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionPartialUpdateResponse, error)

	PluginsBgpSessionPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpSessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionPartialUpdateResponse, error)

	// PluginsBgpSessionUpdateWithBodyWithResponse request with any body
	PluginsBgpSessionUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionUpdateResponse, error)

	PluginsBgpSessionUpdateWithResponse(ctx context.Context, id int, body PluginsBgpSessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionUpdateResponse, error)
}

type PluginsBgpBgppeergroupBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBGPPeerGroupList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgppeergroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgppeergroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgppeergroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBGPSessionList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpBgpsessionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpBgpsessionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpBgpsessionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommunityListRuleList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRulePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRulePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRulePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommunityListList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedCommunityList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpCommunityUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Community
}

// Status returns HTTPResponse.Status
func (r PluginsBgpCommunityUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpCommunityUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBGPPeerGroupList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPeerGroupUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPPeerGroup
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPeerGroupUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPeerGroupUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPrefixListRuleList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRulePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRulePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRulePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixListRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedPrefixListList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpPrefixListUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PrefixList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpPrefixListUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpPrefixListUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRoutingPolicyRuleList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRulePartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRulePartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRulePartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRuleUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicyRule
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRuleUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRuleUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedRoutingPolicyList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpRoutingPolicyUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoutingPolicy
}

// Status returns HTTPResponse.Status
func (r PluginsBgpRoutingPolicyUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpRoutingPolicyUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionBulkDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionBulkDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionBulkDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaginatedBGPSessionList
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionBulkPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionBulkPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionBulkPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionBulkUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionBulkUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionBulkUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionDestroyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionDestroyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionDestroyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionRetrieveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionRetrieveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionRetrieveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionPartialUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionPartialUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionPartialUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PluginsBgpSessionUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BGPSession
}

// Status returns HTTPResponse.Status
func (r PluginsBgpSessionUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PluginsBgpSessionUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PluginsBgpBgppeergroupBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkDestroyWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkDestroyResponse(rsp)
}

// PluginsBgpBgppeergroupListWithResponse request returning *PluginsBgpBgppeergroupListResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupListWithResponse(ctx context.Context, params *PluginsBgpBgppeergroupListParams, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupListResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupListResponse(rsp)
}

// PluginsBgpBgppeergroupBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkPartialUpdateResponse(rsp)
}

// PluginsBgpBgppeergroupCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupCreateResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupCreateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupCreateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupCreateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupCreateResponse(rsp)
}

// PluginsBgpBgppeergroupBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupBulkUpdateWithResponse(ctx context.Context, body PluginsBgpBgppeergroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupBulkUpdateResponse(rsp)
}

// PluginsBgpBgppeergroupDestroyWithResponse request returning *PluginsBgpBgppeergroupDestroyResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupDestroyResponse(rsp)
}

// PluginsBgpBgppeergroupRetrieveWithResponse request returning *PluginsBgpBgppeergroupRetrieveResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupRetrieveResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupRetrieveResponse(rsp)
}

// PluginsBgpBgppeergroupPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgppeergroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupPartialUpdateResponse(rsp)
}

// PluginsBgpBgppeergroupUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgppeergroupUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgppeergroupUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgppeergroupUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgppeergroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgppeergroupUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgppeergroupUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgppeergroupUpdateResponse(rsp)
}

// PluginsBgpBgpsessionBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionBulkDestroyWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkDestroyResponse(rsp)
}

// PluginsBgpBgpsessionListWithResponse request returning *PluginsBgpBgpsessionListResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionListWithResponse(ctx context.Context, params *PluginsBgpBgpsessionListParams, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionListResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionListResponse(rsp)
}

// PluginsBgpBgpsessionBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkPartialUpdateResponse(rsp)
}

// PluginsBgpBgpsessionCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionCreateResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionCreateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionCreateWithResponse(ctx context.Context, body PluginsBgpBgpsessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionCreateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionCreateResponse(rsp)
}

// PluginsBgpBgpsessionBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionBulkUpdateWithResponse(ctx context.Context, body PluginsBgpBgpsessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionBulkUpdateResponse(rsp)
}

// PluginsBgpBgpsessionDestroyWithResponse request returning *PluginsBgpBgpsessionDestroyResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionDestroyResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionDestroyResponse(rsp)
}

// PluginsBgpBgpsessionRetrieveWithResponse request returning *PluginsBgpBgpsessionRetrieveResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionRetrieveResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionRetrieveResponse(rsp)
}

// PluginsBgpBgpsessionPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgpsessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionPartialUpdateResponse(rsp)
}

// PluginsBgpBgpsessionUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpBgpsessionUpdateResponse
func (c *ClientWithResponses) PluginsBgpBgpsessionUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpBgpsessionUpdateWithResponse(ctx context.Context, id int, body PluginsBgpBgpsessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpBgpsessionUpdateResponse, error) {
	rsp, err := c.PluginsBgpBgpsessionUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpBgpsessionUpdateResponse(rsp)
}

// PluginsBgpCommunityListRuleBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRuleBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkDestroyResponse(rsp)
}

// PluginsBgpCommunityListRuleListWithResponse request returning *PluginsBgpCommunityListRuleListResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleListWithResponse(ctx context.Context, params *PluginsBgpCommunityListRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleListResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleListResponse(rsp)
}

// PluginsBgpCommunityListRuleBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRuleBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkPartialUpdateResponse(rsp)
}

// PluginsBgpCommunityListRuleCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRuleCreateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRuleCreateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleCreateResponse(rsp)
}

// PluginsBgpCommunityListRuleBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRuleBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleBulkUpdateResponse(rsp)
}

// PluginsBgpCommunityListRuleDestroyWithResponse request returning *PluginsBgpCommunityListRuleDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleDestroyResponse(rsp)
}

// PluginsBgpCommunityListRuleRetrieveWithResponse request returning *PluginsBgpCommunityListRuleRetrieveResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleRetrieveResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleRetrieveResponse(rsp)
}

// PluginsBgpCommunityListRulePartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRulePartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRulePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRulePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRulePartialUpdateResponse(rsp)
}

// PluginsBgpCommunityListRuleUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListRuleUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRuleUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRuleUpdateResponse(rsp)
}

// PluginsBgpCommunityListBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityListBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkDestroyResponse(rsp)
}

// PluginsBgpCommunityListListWithResponse request returning *PluginsBgpCommunityListListResponse
func (c *ClientWithResponses) PluginsBgpCommunityListListWithResponse(ctx context.Context, params *PluginsBgpCommunityListListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListListResponse, error) {
	rsp, err := c.PluginsBgpCommunityListList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListListResponse(rsp)
}

// PluginsBgpCommunityListBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkPartialUpdateResponse(rsp)
}

// PluginsBgpCommunityListCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListCreateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListCreateWithResponse(ctx context.Context, body PluginsBgpCommunityListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListCreateResponse(rsp)
}

// PluginsBgpCommunityListBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListBulkUpdateResponse(rsp)
}

// PluginsBgpCommunityListDestroyWithResponse request returning *PluginsBgpCommunityListDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityListDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityListDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListDestroyResponse(rsp)
}

// PluginsBgpCommunityListRetrieveWithResponse request returning *PluginsBgpCommunityListRetrieveResponse
func (c *ClientWithResponses) PluginsBgpCommunityListRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListRetrieveResponse, error) {
	rsp, err := c.PluginsBgpCommunityListRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListRetrieveResponse(rsp)
}

// PluginsBgpCommunityListPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListPartialUpdateResponse(rsp)
}

// PluginsBgpCommunityListUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityListUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityListUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityListUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityListUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListUpdateResponse(rsp)
}

// PluginsBgpCommunityBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityBulkDestroyWithResponse(ctx context.Context, body PluginsBgpCommunityBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkDestroyResponse(rsp)
}

// PluginsBgpCommunityListWithResponse request returning *PluginsBgpCommunityListResponse
func (c *ClientWithResponses) PluginsBgpCommunityListWithResponse(ctx context.Context, params *PluginsBgpCommunityListParams, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityListResponse, error) {
	rsp, err := c.PluginsBgpCommunityList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityListResponse(rsp)
}

// PluginsBgpCommunityBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkPartialUpdateResponse(rsp)
}

// PluginsBgpCommunityCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityCreateResponse
func (c *ClientWithResponses) PluginsBgpCommunityCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityCreateWithResponse(ctx context.Context, body PluginsBgpCommunityCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityCreateResponse, error) {
	rsp, err := c.PluginsBgpCommunityCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityCreateResponse(rsp)
}

// PluginsBgpCommunityBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityBulkUpdateWithResponse(ctx context.Context, body PluginsBgpCommunityBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityBulkUpdateResponse(rsp)
}

// PluginsBgpCommunityDestroyWithResponse request returning *PluginsBgpCommunityDestroyResponse
func (c *ClientWithResponses) PluginsBgpCommunityDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityDestroyResponse, error) {
	rsp, err := c.PluginsBgpCommunityDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityDestroyResponse(rsp)
}

// PluginsBgpCommunityRetrieveWithResponse request returning *PluginsBgpCommunityRetrieveResponse
func (c *ClientWithResponses) PluginsBgpCommunityRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityRetrieveResponse, error) {
	rsp, err := c.PluginsBgpCommunityRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityRetrieveResponse(rsp)
}

// PluginsBgpCommunityPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityPartialUpdateResponse(rsp)
}

// PluginsBgpCommunityUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpCommunityUpdateResponse
func (c *ClientWithResponses) PluginsBgpCommunityUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpCommunityUpdateWithResponse(ctx context.Context, id int, body PluginsBgpCommunityUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpCommunityUpdateResponse, error) {
	rsp, err := c.PluginsBgpCommunityUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpCommunityUpdateResponse(rsp)
}

// PluginsBgpPeerGroupBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkDestroyResponse(rsp)
}

// PluginsBgpPeerGroupListWithResponse request returning *PluginsBgpPeerGroupListResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupListWithResponse(ctx context.Context, params *PluginsBgpPeerGroupListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupListResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupListResponse(rsp)
}

// PluginsBgpPeerGroupBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkPartialUpdateResponse(rsp)
}

// PluginsBgpPeerGroupCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupCreateResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupCreateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupCreateWithResponse(ctx context.Context, body PluginsBgpPeerGroupCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupCreateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupCreateResponse(rsp)
}

// PluginsBgpPeerGroupBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPeerGroupBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupBulkUpdateResponse(rsp)
}

// PluginsBgpPeerGroupDestroyWithResponse request returning *PluginsBgpPeerGroupDestroyResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupDestroyResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupDestroyResponse(rsp)
}

// PluginsBgpPeerGroupRetrieveWithResponse request returning *PluginsBgpPeerGroupRetrieveResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupRetrieveResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupRetrieveResponse(rsp)
}

// PluginsBgpPeerGroupPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPeerGroupPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupPartialUpdateResponse(rsp)
}

// PluginsBgpPeerGroupUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPeerGroupUpdateResponse
func (c *ClientWithResponses) PluginsBgpPeerGroupUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPeerGroupUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPeerGroupUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPeerGroupUpdateResponse, error) {
	rsp, err := c.PluginsBgpPeerGroupUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPeerGroupUpdateResponse(rsp)
}

// PluginsBgpPrefixListRuleBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRuleBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkDestroyResponse(rsp)
}

// PluginsBgpPrefixListRuleListWithResponse request returning *PluginsBgpPrefixListRuleListResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleListWithResponse(ctx context.Context, params *PluginsBgpPrefixListRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleListResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleListResponse(rsp)
}

// PluginsBgpPrefixListRuleBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRuleBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkPartialUpdateResponse(rsp)
}

// PluginsBgpPrefixListRuleCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRuleCreateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRuleCreateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleCreateResponse(rsp)
}

// PluginsBgpPrefixListRuleBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRuleBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleBulkUpdateResponse(rsp)
}

// PluginsBgpPrefixListRuleDestroyWithResponse request returning *PluginsBgpPrefixListRuleDestroyResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleDestroyResponse(rsp)
}

// PluginsBgpPrefixListRuleRetrieveWithResponse request returning *PluginsBgpPrefixListRuleRetrieveResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleRetrieveResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleRetrieveResponse(rsp)
}

// PluginsBgpPrefixListRulePartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRulePartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRulePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRulePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRulePartialUpdateResponse(rsp)
}

// PluginsBgpPrefixListRuleUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListRuleUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRuleUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRuleUpdateResponse(rsp)
}

// PluginsBgpPrefixListBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpPrefixListBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListBulkDestroyWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkDestroyResponse(rsp)
}

// PluginsBgpPrefixListListWithResponse request returning *PluginsBgpPrefixListListResponse
func (c *ClientWithResponses) PluginsBgpPrefixListListWithResponse(ctx context.Context, params *PluginsBgpPrefixListListParams, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListListResponse, error) {
	rsp, err := c.PluginsBgpPrefixListList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListListResponse(rsp)
}

// PluginsBgpPrefixListBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkPartialUpdateResponse(rsp)
}

// PluginsBgpPrefixListCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListCreateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListCreateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListCreateWithResponse(ctx context.Context, body PluginsBgpPrefixListCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListCreateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListCreateResponse(rsp)
}

// PluginsBgpPrefixListBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListBulkUpdateWithResponse(ctx context.Context, body PluginsBgpPrefixListBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListBulkUpdateResponse(rsp)
}

// PluginsBgpPrefixListDestroyWithResponse request returning *PluginsBgpPrefixListDestroyResponse
func (c *ClientWithResponses) PluginsBgpPrefixListDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListDestroyResponse, error) {
	rsp, err := c.PluginsBgpPrefixListDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListDestroyResponse(rsp)
}

// PluginsBgpPrefixListRetrieveWithResponse request returning *PluginsBgpPrefixListRetrieveResponse
func (c *ClientWithResponses) PluginsBgpPrefixListRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListRetrieveResponse, error) {
	rsp, err := c.PluginsBgpPrefixListRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListRetrieveResponse(rsp)
}

// PluginsBgpPrefixListPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListPartialUpdateResponse(rsp)
}

// PluginsBgpPrefixListUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpPrefixListUpdateResponse
func (c *ClientWithResponses) PluginsBgpPrefixListUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpPrefixListUpdateWithResponse(ctx context.Context, id int, body PluginsBgpPrefixListUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpPrefixListUpdateResponse, error) {
	rsp, err := c.PluginsBgpPrefixListUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpPrefixListUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRuleBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkDestroyWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkDestroyResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleListWithResponse request returning *PluginsBgpRoutingPolicyRuleListResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleListWithResponse(ctx context.Context, params *PluginsBgpRoutingPolicyRuleListParams, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleListResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleListResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRuleCreateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleCreateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleCreateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleCreateResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRuleBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleBulkUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyRuleBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleBulkUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleDestroyWithResponse request returning *PluginsBgpRoutingPolicyRuleDestroyResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleDestroyResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleRetrieveWithResponse request returning *PluginsBgpRoutingPolicyRuleRetrieveResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleRetrieveResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleRetrieveResponse(rsp)
}

// PluginsBgpRoutingPolicyRulePartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRulePartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRulePartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRulePartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRulePartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRulePartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyRulePartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRulePartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRulePartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRulePartialUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyRuleUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyRuleUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyRuleUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyRuleUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRuleUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRuleUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRuleUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkDestroyWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkDestroyResponse(rsp)
}

// PluginsBgpRoutingPolicyListWithResponse request returning *PluginsBgpRoutingPolicyListResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyListWithResponse(ctx context.Context, params *PluginsBgpRoutingPolicyListParams, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyListResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyListResponse(rsp)
}

// PluginsBgpRoutingPolicyBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkPartialUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyCreateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyCreateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyCreateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyCreateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyCreateResponse(rsp)
}

// PluginsBgpRoutingPolicyBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyBulkUpdateWithResponse(ctx context.Context, body PluginsBgpRoutingPolicyBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyBulkUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyDestroyWithResponse request returning *PluginsBgpRoutingPolicyDestroyResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyDestroyResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyDestroyResponse(rsp)
}

// PluginsBgpRoutingPolicyRetrieveWithResponse request returning *PluginsBgpRoutingPolicyRetrieveResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyRetrieveResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyRetrieveResponse(rsp)
}

// PluginsBgpRoutingPolicyPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyPartialUpdateResponse(rsp)
}

// PluginsBgpRoutingPolicyUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpRoutingPolicyUpdateResponse
func (c *ClientWithResponses) PluginsBgpRoutingPolicyUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpRoutingPolicyUpdateWithResponse(ctx context.Context, id int, body PluginsBgpRoutingPolicyUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpRoutingPolicyUpdateResponse, error) {
	rsp, err := c.PluginsBgpRoutingPolicyUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpRoutingPolicyUpdateResponse(rsp)
}

// PluginsBgpSessionBulkDestroyWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionBulkDestroyResponse
func (c *ClientWithResponses) PluginsBgpSessionBulkDestroyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkDestroyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkDestroyResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionBulkDestroyWithResponse(ctx context.Context, body PluginsBgpSessionBulkDestroyJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkDestroyResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkDestroy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkDestroyResponse(rsp)
}

// PluginsBgpSessionListWithResponse request returning *PluginsBgpSessionListResponse
func (c *ClientWithResponses) PluginsBgpSessionListWithResponse(ctx context.Context, params *PluginsBgpSessionListParams, reqEditors ...RequestEditorFn) (*PluginsBgpSessionListResponse, error) {
	rsp, err := c.PluginsBgpSessionList(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionListResponse(rsp)
}

// PluginsBgpSessionBulkPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionBulkPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpSessionBulkPartialUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkPartialUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionBulkPartialUpdateWithResponse(ctx context.Context, body PluginsBgpSessionBulkPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkPartialUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkPartialUpdateResponse(rsp)
}

// PluginsBgpSessionCreateWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionCreateResponse
func (c *ClientWithResponses) PluginsBgpSessionCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionCreateResponse, error) {
	rsp, err := c.PluginsBgpSessionCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionCreateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionCreateWithResponse(ctx context.Context, body PluginsBgpSessionCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionCreateResponse, error) {
	rsp, err := c.PluginsBgpSessionCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionCreateResponse(rsp)
}

// PluginsBgpSessionBulkUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionBulkUpdateResponse
func (c *ClientWithResponses) PluginsBgpSessionBulkUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionBulkUpdateWithResponse(ctx context.Context, body PluginsBgpSessionBulkUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionBulkUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionBulkUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionBulkUpdateResponse(rsp)
}

// PluginsBgpSessionDestroyWithResponse request returning *PluginsBgpSessionDestroyResponse
func (c *ClientWithResponses) PluginsBgpSessionDestroyWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpSessionDestroyResponse, error) {
	rsp, err := c.PluginsBgpSessionDestroy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionDestroyResponse(rsp)
}

// PluginsBgpSessionRetrieveWithResponse request returning *PluginsBgpSessionRetrieveResponse
func (c *ClientWithResponses) PluginsBgpSessionRetrieveWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*PluginsBgpSessionRetrieveResponse, error) {
	rsp, err := c.PluginsBgpSessionRetrieve(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionRetrieveResponse(rsp)
}

// PluginsBgpSessionPartialUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionPartialUpdateResponse
func (c *ClientWithResponses) PluginsBgpSessionPartialUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionPartialUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionPartialUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionPartialUpdateWithResponse(ctx context.Context, id int, body PluginsBgpSessionPartialUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionPartialUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionPartialUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionPartialUpdateResponse(rsp)
}

// PluginsBgpSessionUpdateWithBodyWithResponse request with arbitrary body returning *PluginsBgpSessionUpdateResponse
func (c *ClientWithResponses) PluginsBgpSessionUpdateWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PluginsBgpSessionUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionUpdateWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionUpdateResponse(rsp)
}

func (c *ClientWithResponses) PluginsBgpSessionUpdateWithResponse(ctx context.Context, id int, body PluginsBgpSessionUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*PluginsBgpSessionUpdateResponse, error) {
	rsp, err := c.PluginsBgpSessionUpdate(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePluginsBgpSessionUpdateResponse(rsp)
}

// ParsePluginsBgpBgppeergroupBulkDestroyResponse parses an HTTP response from a PluginsBgpBgppeergroupBulkDestroyWithResponse call
func ParsePluginsBgpBgppeergroupBulkDestroyResponse(rsp *http.Response) (*PluginsBgpBgppeergroupBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupListResponse parses an HTTP response from a PluginsBgpBgppeergroupListWithResponse call
func ParsePluginsBgpBgppeergroupListResponse(rsp *http.Response) (*PluginsBgpBgppeergroupListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBGPPeerGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpBgppeergroupBulkPartialUpdateWithResponse call
func ParsePluginsBgpBgppeergroupBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpBgppeergroupBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupCreateResponse parses an HTTP response from a PluginsBgpBgppeergroupCreateWithResponse call
func ParsePluginsBgpBgppeergroupCreateResponse(rsp *http.Response) (*PluginsBgpBgppeergroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupBulkUpdateResponse parses an HTTP response from a PluginsBgpBgppeergroupBulkUpdateWithResponse call
func ParsePluginsBgpBgppeergroupBulkUpdateResponse(rsp *http.Response) (*PluginsBgpBgppeergroupBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupDestroyResponse parses an HTTP response from a PluginsBgpBgppeergroupDestroyWithResponse call
func ParsePluginsBgpBgppeergroupDestroyResponse(rsp *http.Response) (*PluginsBgpBgppeergroupDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupRetrieveResponse parses an HTTP response from a PluginsBgpBgppeergroupRetrieveWithResponse call
func ParsePluginsBgpBgppeergroupRetrieveResponse(rsp *http.Response) (*PluginsBgpBgppeergroupRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupPartialUpdateResponse parses an HTTP response from a PluginsBgpBgppeergroupPartialUpdateWithResponse call
func ParsePluginsBgpBgppeergroupPartialUpdateResponse(rsp *http.Response) (*PluginsBgpBgppeergroupPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgppeergroupUpdateResponse parses an HTTP response from a PluginsBgpBgppeergroupUpdateWithResponse call
func ParsePluginsBgpBgppeergroupUpdateResponse(rsp *http.Response) (*PluginsBgpBgppeergroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgppeergroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionBulkDestroyResponse parses an HTTP response from a PluginsBgpBgpsessionBulkDestroyWithResponse call
func ParsePluginsBgpBgpsessionBulkDestroyResponse(rsp *http.Response) (*PluginsBgpBgpsessionBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpBgpsessionListResponse parses an HTTP response from a PluginsBgpBgpsessionListWithResponse call
func ParsePluginsBgpBgpsessionListResponse(rsp *http.Response) (*PluginsBgpBgpsessionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBGPSessionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpBgpsessionBulkPartialUpdateWithResponse call
func ParsePluginsBgpBgpsessionBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpBgpsessionBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionCreateResponse parses an HTTP response from a PluginsBgpBgpsessionCreateWithResponse call
func ParsePluginsBgpBgpsessionCreateResponse(rsp *http.Response) (*PluginsBgpBgpsessionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionBulkUpdateResponse parses an HTTP response from a PluginsBgpBgpsessionBulkUpdateWithResponse call
func ParsePluginsBgpBgpsessionBulkUpdateResponse(rsp *http.Response) (*PluginsBgpBgpsessionBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionDestroyResponse parses an HTTP response from a PluginsBgpBgpsessionDestroyWithResponse call
func ParsePluginsBgpBgpsessionDestroyResponse(rsp *http.Response) (*PluginsBgpBgpsessionDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpBgpsessionRetrieveResponse parses an HTTP response from a PluginsBgpBgpsessionRetrieveWithResponse call
func ParsePluginsBgpBgpsessionRetrieveResponse(rsp *http.Response) (*PluginsBgpBgpsessionRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionPartialUpdateResponse parses an HTTP response from a PluginsBgpBgpsessionPartialUpdateWithResponse call
func ParsePluginsBgpBgpsessionPartialUpdateResponse(rsp *http.Response) (*PluginsBgpBgpsessionPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpBgpsessionUpdateResponse parses an HTTP response from a PluginsBgpBgpsessionUpdateWithResponse call
func ParsePluginsBgpBgpsessionUpdateResponse(rsp *http.Response) (*PluginsBgpBgpsessionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpBgpsessionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleBulkDestroyResponse parses an HTTP response from a PluginsBgpCommunityListRuleBulkDestroyWithResponse call
func ParsePluginsBgpCommunityListRuleBulkDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleListResponse parses an HTTP response from a PluginsBgpCommunityListRuleListWithResponse call
func ParsePluginsBgpCommunityListRuleListResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommunityListRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityListRuleBulkPartialUpdateWithResponse call
func ParsePluginsBgpCommunityListRuleBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleCreateResponse parses an HTTP response from a PluginsBgpCommunityListRuleCreateWithResponse call
func ParsePluginsBgpCommunityListRuleCreateResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleBulkUpdateResponse parses an HTTP response from a PluginsBgpCommunityListRuleBulkUpdateWithResponse call
func ParsePluginsBgpCommunityListRuleBulkUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleDestroyResponse parses an HTTP response from a PluginsBgpCommunityListRuleDestroyWithResponse call
func ParsePluginsBgpCommunityListRuleDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleRetrieveResponse parses an HTTP response from a PluginsBgpCommunityListRuleRetrieveWithResponse call
func ParsePluginsBgpCommunityListRuleRetrieveResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRulePartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityListRulePartialUpdateWithResponse call
func ParsePluginsBgpCommunityListRulePartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListRulePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRulePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListRuleUpdateResponse parses an HTTP response from a PluginsBgpCommunityListRuleUpdateWithResponse call
func ParsePluginsBgpCommunityListRuleUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListBulkDestroyResponse parses an HTTP response from a PluginsBgpCommunityListBulkDestroyWithResponse call
func ParsePluginsBgpCommunityListBulkDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityListBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityListListResponse parses an HTTP response from a PluginsBgpCommunityListListWithResponse call
func ParsePluginsBgpCommunityListListResponse(rsp *http.Response) (*PluginsBgpCommunityListListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommunityListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityListBulkPartialUpdateWithResponse call
func ParsePluginsBgpCommunityListBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListCreateResponse parses an HTTP response from a PluginsBgpCommunityListCreateWithResponse call
func ParsePluginsBgpCommunityListCreateResponse(rsp *http.Response) (*PluginsBgpCommunityListCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListBulkUpdateResponse parses an HTTP response from a PluginsBgpCommunityListBulkUpdateWithResponse call
func ParsePluginsBgpCommunityListBulkUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListDestroyResponse parses an HTTP response from a PluginsBgpCommunityListDestroyWithResponse call
func ParsePluginsBgpCommunityListDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityListDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityListRetrieveResponse parses an HTTP response from a PluginsBgpCommunityListRetrieveWithResponse call
func ParsePluginsBgpCommunityListRetrieveResponse(rsp *http.Response) (*PluginsBgpCommunityListRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListPartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityListPartialUpdateWithResponse call
func ParsePluginsBgpCommunityListPartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityListUpdateResponse parses an HTTP response from a PluginsBgpCommunityListUpdateWithResponse call
func ParsePluginsBgpCommunityListUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityListUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityBulkDestroyResponse parses an HTTP response from a PluginsBgpCommunityBulkDestroyWithResponse call
func ParsePluginsBgpCommunityBulkDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityListResponse parses an HTTP response from a PluginsBgpCommunityListWithResponse call
func ParsePluginsBgpCommunityListResponse(rsp *http.Response) (*PluginsBgpCommunityListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedCommunityList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityBulkPartialUpdateWithResponse call
func ParsePluginsBgpCommunityBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityCreateResponse parses an HTTP response from a PluginsBgpCommunityCreateWithResponse call
func ParsePluginsBgpCommunityCreateResponse(rsp *http.Response) (*PluginsBgpCommunityCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityBulkUpdateResponse parses an HTTP response from a PluginsBgpCommunityBulkUpdateWithResponse call
func ParsePluginsBgpCommunityBulkUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityDestroyResponse parses an HTTP response from a PluginsBgpCommunityDestroyWithResponse call
func ParsePluginsBgpCommunityDestroyResponse(rsp *http.Response) (*PluginsBgpCommunityDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpCommunityRetrieveResponse parses an HTTP response from a PluginsBgpCommunityRetrieveWithResponse call
func ParsePluginsBgpCommunityRetrieveResponse(rsp *http.Response) (*PluginsBgpCommunityRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityPartialUpdateResponse parses an HTTP response from a PluginsBgpCommunityPartialUpdateWithResponse call
func ParsePluginsBgpCommunityPartialUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpCommunityUpdateResponse parses an HTTP response from a PluginsBgpCommunityUpdateWithResponse call
func ParsePluginsBgpCommunityUpdateResponse(rsp *http.Response) (*PluginsBgpCommunityUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpCommunityUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Community
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupBulkDestroyResponse parses an HTTP response from a PluginsBgpPeerGroupBulkDestroyWithResponse call
func ParsePluginsBgpPeerGroupBulkDestroyResponse(rsp *http.Response) (*PluginsBgpPeerGroupBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPeerGroupListResponse parses an HTTP response from a PluginsBgpPeerGroupListWithResponse call
func ParsePluginsBgpPeerGroupListResponse(rsp *http.Response) (*PluginsBgpPeerGroupListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBGPPeerGroupList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpPeerGroupBulkPartialUpdateWithResponse call
func ParsePluginsBgpPeerGroupBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpPeerGroupBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupCreateResponse parses an HTTP response from a PluginsBgpPeerGroupCreateWithResponse call
func ParsePluginsBgpPeerGroupCreateResponse(rsp *http.Response) (*PluginsBgpPeerGroupCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupBulkUpdateResponse parses an HTTP response from a PluginsBgpPeerGroupBulkUpdateWithResponse call
func ParsePluginsBgpPeerGroupBulkUpdateResponse(rsp *http.Response) (*PluginsBgpPeerGroupBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupDestroyResponse parses an HTTP response from a PluginsBgpPeerGroupDestroyWithResponse call
func ParsePluginsBgpPeerGroupDestroyResponse(rsp *http.Response) (*PluginsBgpPeerGroupDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPeerGroupRetrieveResponse parses an HTTP response from a PluginsBgpPeerGroupRetrieveWithResponse call
func ParsePluginsBgpPeerGroupRetrieveResponse(rsp *http.Response) (*PluginsBgpPeerGroupRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupPartialUpdateResponse parses an HTTP response from a PluginsBgpPeerGroupPartialUpdateWithResponse call
func ParsePluginsBgpPeerGroupPartialUpdateResponse(rsp *http.Response) (*PluginsBgpPeerGroupPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPeerGroupUpdateResponse parses an HTTP response from a PluginsBgpPeerGroupUpdateWithResponse call
func ParsePluginsBgpPeerGroupUpdateResponse(rsp *http.Response) (*PluginsBgpPeerGroupUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPeerGroupUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPPeerGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleBulkDestroyResponse parses an HTTP response from a PluginsBgpPrefixListRuleBulkDestroyWithResponse call
func ParsePluginsBgpPrefixListRuleBulkDestroyResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleListResponse parses an HTTP response from a PluginsBgpPrefixListRuleListWithResponse call
func ParsePluginsBgpPrefixListRuleListResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPrefixListRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpPrefixListRuleBulkPartialUpdateWithResponse call
func ParsePluginsBgpPrefixListRuleBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleCreateResponse parses an HTTP response from a PluginsBgpPrefixListRuleCreateWithResponse call
func ParsePluginsBgpPrefixListRuleCreateResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleBulkUpdateResponse parses an HTTP response from a PluginsBgpPrefixListRuleBulkUpdateWithResponse call
func ParsePluginsBgpPrefixListRuleBulkUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleDestroyResponse parses an HTTP response from a PluginsBgpPrefixListRuleDestroyWithResponse call
func ParsePluginsBgpPrefixListRuleDestroyResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleRetrieveResponse parses an HTTP response from a PluginsBgpPrefixListRuleRetrieveWithResponse call
func ParsePluginsBgpPrefixListRuleRetrieveResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRulePartialUpdateResponse parses an HTTP response from a PluginsBgpPrefixListRulePartialUpdateWithResponse call
func ParsePluginsBgpPrefixListRulePartialUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListRulePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRulePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListRuleUpdateResponse parses an HTTP response from a PluginsBgpPrefixListRuleUpdateWithResponse call
func ParsePluginsBgpPrefixListRuleUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixListRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListBulkDestroyResponse parses an HTTP response from a PluginsBgpPrefixListBulkDestroyWithResponse call
func ParsePluginsBgpPrefixListBulkDestroyResponse(rsp *http.Response) (*PluginsBgpPrefixListBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPrefixListListResponse parses an HTTP response from a PluginsBgpPrefixListListWithResponse call
func ParsePluginsBgpPrefixListListResponse(rsp *http.Response) (*PluginsBgpPrefixListListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedPrefixListList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpPrefixListBulkPartialUpdateWithResponse call
func ParsePluginsBgpPrefixListBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListCreateResponse parses an HTTP response from a PluginsBgpPrefixListCreateWithResponse call
func ParsePluginsBgpPrefixListCreateResponse(rsp *http.Response) (*PluginsBgpPrefixListCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListBulkUpdateResponse parses an HTTP response from a PluginsBgpPrefixListBulkUpdateWithResponse call
func ParsePluginsBgpPrefixListBulkUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListDestroyResponse parses an HTTP response from a PluginsBgpPrefixListDestroyWithResponse call
func ParsePluginsBgpPrefixListDestroyResponse(rsp *http.Response) (*PluginsBgpPrefixListDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpPrefixListRetrieveResponse parses an HTTP response from a PluginsBgpPrefixListRetrieveWithResponse call
func ParsePluginsBgpPrefixListRetrieveResponse(rsp *http.Response) (*PluginsBgpPrefixListRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListPartialUpdateResponse parses an HTTP response from a PluginsBgpPrefixListPartialUpdateWithResponse call
func ParsePluginsBgpPrefixListPartialUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpPrefixListUpdateResponse parses an HTTP response from a PluginsBgpPrefixListUpdateWithResponse call
func ParsePluginsBgpPrefixListUpdateResponse(rsp *http.Response) (*PluginsBgpPrefixListUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpPrefixListUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PrefixList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleBulkDestroyResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleBulkDestroyWithResponse call
func ParsePluginsBgpRoutingPolicyRuleBulkDestroyResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleListResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleListWithResponse call
func ParsePluginsBgpRoutingPolicyRuleListResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRoutingPolicyRuleList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleBulkPartialUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleCreateResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleCreateWithResponse call
func ParsePluginsBgpRoutingPolicyRuleCreateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleBulkUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleBulkUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyRuleBulkUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleDestroyResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleDestroyWithResponse call
func ParsePluginsBgpRoutingPolicyRuleDestroyResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleRetrieveResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleRetrieveWithResponse call
func ParsePluginsBgpRoutingPolicyRuleRetrieveResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRulePartialUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyRulePartialUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyRulePartialUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRulePartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRulePartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRuleUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyRuleUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyRuleUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRuleUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRuleUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicyRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyBulkDestroyResponse parses an HTTP response from a PluginsBgpRoutingPolicyBulkDestroyWithResponse call
func ParsePluginsBgpRoutingPolicyBulkDestroyResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyListResponse parses an HTTP response from a PluginsBgpRoutingPolicyListWithResponse call
func ParsePluginsBgpRoutingPolicyListResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedRoutingPolicyList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyBulkPartialUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyCreateResponse parses an HTTP response from a PluginsBgpRoutingPolicyCreateWithResponse call
func ParsePluginsBgpRoutingPolicyCreateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyBulkUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyBulkUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyBulkUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyDestroyResponse parses an HTTP response from a PluginsBgpRoutingPolicyDestroyWithResponse call
func ParsePluginsBgpRoutingPolicyDestroyResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyRetrieveResponse parses an HTTP response from a PluginsBgpRoutingPolicyRetrieveWithResponse call
func ParsePluginsBgpRoutingPolicyRetrieveResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyPartialUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyPartialUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyPartialUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpRoutingPolicyUpdateResponse parses an HTTP response from a PluginsBgpRoutingPolicyUpdateWithResponse call
func ParsePluginsBgpRoutingPolicyUpdateResponse(rsp *http.Response) (*PluginsBgpRoutingPolicyUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpRoutingPolicyUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoutingPolicy
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionBulkDestroyResponse parses an HTTP response from a PluginsBgpSessionBulkDestroyWithResponse call
func ParsePluginsBgpSessionBulkDestroyResponse(rsp *http.Response) (*PluginsBgpSessionBulkDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionBulkDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpSessionListResponse parses an HTTP response from a PluginsBgpSessionListWithResponse call
func ParsePluginsBgpSessionListResponse(rsp *http.Response) (*PluginsBgpSessionListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaginatedBGPSessionList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionBulkPartialUpdateResponse parses an HTTP response from a PluginsBgpSessionBulkPartialUpdateWithResponse call
func ParsePluginsBgpSessionBulkPartialUpdateResponse(rsp *http.Response) (*PluginsBgpSessionBulkPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionBulkPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionCreateResponse parses an HTTP response from a PluginsBgpSessionCreateWithResponse call
func ParsePluginsBgpSessionCreateResponse(rsp *http.Response) (*PluginsBgpSessionCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionBulkUpdateResponse parses an HTTP response from a PluginsBgpSessionBulkUpdateWithResponse call
func ParsePluginsBgpSessionBulkUpdateResponse(rsp *http.Response) (*PluginsBgpSessionBulkUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionBulkUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionDestroyResponse parses an HTTP response from a PluginsBgpSessionDestroyWithResponse call
func ParsePluginsBgpSessionDestroyResponse(rsp *http.Response) (*PluginsBgpSessionDestroyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionDestroyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePluginsBgpSessionRetrieveResponse parses an HTTP response from a PluginsBgpSessionRetrieveWithResponse call
func ParsePluginsBgpSessionRetrieveResponse(rsp *http.Response) (*PluginsBgpSessionRetrieveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionRetrieveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionPartialUpdateResponse parses an HTTP response from a PluginsBgpSessionPartialUpdateWithResponse call
func ParsePluginsBgpSessionPartialUpdateResponse(rsp *http.Response) (*PluginsBgpSessionPartialUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionPartialUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePluginsBgpSessionUpdateResponse parses an HTTP response from a PluginsBgpSessionUpdateWithResponse call
func ParsePluginsBgpSessionUpdateResponse(rsp *http.Response) (*PluginsBgpSessionUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PluginsBgpSessionUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BGPSession
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
